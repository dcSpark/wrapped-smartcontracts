{"code":"import { configureChains } from \"wagmi\";\r\nimport { jsonRpcProvider } from \"wagmi/providers/jsonRpc\";\r\nimport { publicProvider } from \"wagmi/providers/public\";\r\nimport { CardanoWSCConnector } from \"./wsc-cardano-connector\";\r\n// import { CardanoWSCConnector } from \"@dcspark/cardano-wsc-wagmi\"; //TODO: fix this\r\nexport const milkomedaChains = [\r\n    {\r\n        id: 200101,\r\n        name: \"Milkomeda C1 Testnet\",\r\n        network: \"Milkomeda C1 Testnet\",\r\n        nativeCurrency: {\r\n            name: \"mTADA\",\r\n            symbol: \"mTADA\",\r\n            decimals: 18,\r\n        },\r\n        rpcUrls: {\r\n            public: { http: [\"https://rpc-devnet-cardano-evm.c1.milkomeda.com\"] },\r\n            default: { http: [\"https://rpc-devnet-cardano-evm.c1.milkomeda.com\"] },\r\n        },\r\n        blockExplorers: {\r\n            etherscan: { name: \"\", url: \"\" },\r\n            default: {\r\n                name: \"\",\r\n                url: \"https://explorer-devnet-cardano-evm.c1.milkomeda.com\",\r\n            },\r\n        },\r\n    },\r\n    {\r\n        id: 2001,\r\n        name: \"Milkomeda C1 Mainnet\",\r\n        network: \"Milkomeda C1 Mainnet\",\r\n        nativeCurrency: {\r\n            name: \"mADA\",\r\n            symbol: \"mADA\",\r\n            decimals: 18,\r\n        },\r\n        rpcUrls: {\r\n            public: { http: [\"https://rpc-mainnet-cardano-evm.c1.milkomeda.com\"] },\r\n            default: { http: [\"https://rpc-mainnet-cardano-evm.c1.milkomeda.com\"] },\r\n        },\r\n        blockExplorers: {\r\n            etherscan: { name: \"\", url: \"\" },\r\n            default: {\r\n                name: \"\",\r\n                url: \"https://explorer-mainnet-cardano-evm.c1.milkomeda.com\",\r\n            },\r\n        },\r\n    },\r\n];\r\nconst defaultChains = [...milkomedaChains];\r\nconst getDefaultConnectors = ({ chains }) => {\r\n    let connectors = [];\r\n    // Add the rest of the connectors\r\n    connectors = [\r\n        ...connectors,\r\n        new CardanoWSCConnector({\r\n            chains,\r\n            options: {\r\n                name: \"flint\",\r\n                oracleUrl: \"https://wsc-server-devnet.c1.milkomeda.com\",\r\n                blockfrostKey: \"preprodliMqEQ9cvQgAFuV7b6dhA4lkjTX1eBLb\",\r\n                jsonRpcProviderUrl: undefined,\r\n            },\r\n        }),\r\n        new CardanoWSCConnector({\r\n            chains,\r\n            options: {\r\n                name: \"etrnal\",\r\n                oracleUrl: \"https://wsc-server-devnet.c1.milkomeda.com\",\r\n                blockfrostKey: \"preprodliMqEQ9cvQgAFuV7b6dhA4lkjTX1eBLb\",\r\n                jsonRpcProviderUrl: undefined,\r\n            },\r\n        }),\r\n    ];\r\n    return connectors;\r\n};\r\nconst defaultConfig = ({ autoConnect = true, // TODO: check why breaks in wsc\r\nchains = defaultChains, connectors, provider, stallTimeout, webSocketProvider, enableWebSocketProvider, }) => {\r\n    const providers = [];\r\n    providers.push(jsonRpcProvider({\r\n        rpc: (c) => {\r\n            return { http: c.rpcUrls.default.http[0] };\r\n        },\r\n    }));\r\n    providers.push(publicProvider());\r\n    const { provider: configuredProvider, chains: configuredChains, webSocketProvider: configuredWebSocketProvider, } = configureChains(chains, providers, { stallTimeout });\r\n    const milkomedaWSCClient = {\r\n        autoConnect,\r\n        connectors: connectors !== null && connectors !== void 0 ? connectors : getDefaultConnectors({\r\n            chains: configuredChains,\r\n        }),\r\n        provider: provider !== null && provider !== void 0 ? provider : configuredProvider,\r\n        webSocketProvider: enableWebSocketProvider // Removed by default, breaks if used in Next.js â€“ \"unhandledRejection: Error: could not detect network\"\r\n            ? webSocketProvider !== null && webSocketProvider !== void 0 ? webSocketProvider : configuredWebSocketProvider\r\n            : undefined,\r\n    };\r\n    return { ...milkomedaWSCClient };\r\n};\r\nexport default defaultConfig;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/chains.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/providers/jsonRpc.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/providers/public.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/wsc-cardano-connector.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/defaultConfig.d.ts","writeByteOrderMark":false,"text":"import { Connector } from \"wagmi\";\r\nimport { Chain } from \"wagmi/chains\";\r\nexport declare const milkomedaChains: {\r\n    id: number;\r\n    name: string;\r\n    network: string;\r\n    nativeCurrency: {\r\n        name: string;\r\n        symbol: string;\r\n        decimals: number;\r\n    };\r\n    rpcUrls: {\r\n        public: {\r\n            http: string[];\r\n        };\r\n        default: {\r\n            http: string[];\r\n        };\r\n    };\r\n    blockExplorers: {\r\n        etherscan: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n        default: {\r\n            name: string;\r\n            url: string;\r\n        };\r\n    };\r\n}[];\r\ntype DefaultConfigProps = {\r\n    autoConnect?: boolean;\r\n    chains?: Chain[];\r\n    connectors?: any;\r\n    provider?: any;\r\n    webSocketProvider?: any;\r\n    enableWebSocketProvider?: boolean;\r\n    stallTimeout?: number;\r\n};\r\ndeclare const defaultConfig: ({ autoConnect, chains, connectors, provider, stallTimeout, webSocketProvider, enableWebSocketProvider, }: DefaultConfigProps) => {\r\n    autoConnect?: boolean | undefined;\r\n    connectors?: Connector<any, any, any>[] | undefined;\r\n    provider: any;\r\n    webSocketProvider?: any;\r\n};\r\nexport default defaultConfig;\r\n"}}
