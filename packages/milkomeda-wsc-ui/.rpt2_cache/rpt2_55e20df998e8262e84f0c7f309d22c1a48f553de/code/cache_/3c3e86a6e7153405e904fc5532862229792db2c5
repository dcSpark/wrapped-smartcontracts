{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport React from \"react\";\r\nimport { ErrorMessage, SpinnerWrapper, StepDescription, StepTitle, SuccessWrapper, } from \"./styles\";\r\nimport Button from \"../Common/Button\";\r\nimport { useContext } from \"../ConnectWSC\";\r\nimport { Spinner } from \"../Common/Spinner\";\r\nimport { CheckCircle2 } from \"lucide-react\";\r\nimport { DEFAULT_STEP_TIMEOUT } from \"./constants\";\r\nconst ActionExecutionStep = ({ nextStep }) => {\r\n    const { wscAction } = useContext();\r\n    const [executionTxStatus, setExecutionTxStatus] = React.useState(\"idle\");\r\n    const [txStatusError, setTxStatusError] = React.useState(null);\r\n    const onWSCAction = async () => {\r\n        setExecutionTxStatus(\"pending\");\r\n        try {\r\n            await (wscAction === null || wscAction === void 0 ? void 0 : wscAction());\r\n            setExecutionTxStatus(\"success\");\r\n            setTimeout(() => {\r\n                nextStep();\r\n            }, DEFAULT_STEP_TIMEOUT);\r\n        }\r\n        catch (err) {\r\n            setExecutionTxStatus(\"error\");\r\n            if (err instanceof Error) {\r\n                setTxStatusError(err.message);\r\n            }\r\n        }\r\n    };\r\n    const isLoading = executionTxStatus === \"pending\";\r\n    const isSuccess = executionTxStatus === \"success\";\r\n    const isError = executionTxStatus === \"error\";\r\n    return (_jsxs(\"div\", { children: [_jsx(StepTitle, { children: \"Executing Actions with Wrap Tokens: Smart Contract Interoperability\" }), _jsx(StepDescription, { children: \"Discover the power of wrap tokens in smart contracts, enabling seamless execution of actions across multiple blockchains.\" }), isLoading && (_jsxs(SpinnerWrapper, { children: [_jsx(Spinner, {}), _jsx(\"span\", { children: \"Executing transaction\" })] })), isSuccess && (_jsxs(SuccessWrapper, { children: [_jsx(CheckCircle2, {}), _jsx(\"span\", { children: \"Transaction has been successfully executed!\" })] })), isError && (_jsxs(ErrorMessage, { role: \"alert\", children: [\"Ups, something went wrong. \", txStatusError ? `Error: ${txStatusError}` : \"\", \" \"] })), _jsx(Button, { variant: \"primary\", onClick: onWSCAction, children: \"Confirm wrapping\" })] }));\r\n};\r\nexport default ActionExecutionStep;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Spinner/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/lucide-react/dist/lucide-react.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/constants.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/TransactionStepper/ActionExecutionStep.d.ts","writeByteOrderMark":false,"text":"declare const ActionExecutionStep: ({ nextStep }: {\r\n    nextStep: any;\r\n}) => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default ActionExecutionStep;\r\n"}}
