{"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\r\nimport { useEffect } from \"react\";\r\nimport { useAccount, useNetwork } from \"wagmi\";\r\nimport { routes, useContext } from \"../ConnectWSC\";\r\nimport Modal from \"../Common/Modal\";\r\nimport Onboarding from \"../Pages/Onboarding\";\r\nimport Connectors from \"../Pages/Connectors\";\r\nimport MobileConnectors from \"../Pages/MobileConnectors\";\r\nimport ConnectUsing from \"./ConnectUsing\";\r\nimport DownloadApp from \"../Pages/DownloadApp\";\r\nimport Profile from \"../Pages/Profile\";\r\nconst ConnectModal = () => {\r\n    const context = useContext();\r\n    const { isConnected } = useAccount();\r\n    const { chain } = useNetwork();\r\n    //if chain is unsupported we enforce a \"switch chain\" prompt\r\n    const closeable = !(chain === null || chain === void 0 ? void 0 : chain.unsupported);\r\n    const showBackButton = closeable && context.route !== routes.CONNECTORS && context.route !== routes.PROFILE;\r\n    const onBack = () => {\r\n        if (context.route === routes.DOWNLOAD) {\r\n            context.setRoute(routes.CONNECT);\r\n        }\r\n        else {\r\n            context.setRoute(routes.CONNECTORS);\r\n        }\r\n    };\r\n    const pages = {\r\n        onboarding: _jsx(Onboarding, {}),\r\n        download: _jsx(DownloadApp, { connectorId: context.connector }),\r\n        connectors: _jsx(Connectors, {}),\r\n        mobileConnectors: _jsx(MobileConnectors, {}),\r\n        connect: _jsx(ConnectUsing, { connectorId: context.connector }),\r\n        profile: _jsx(Profile, {}),\r\n    };\r\n    function hide() {\r\n        context.setOpen(false);\r\n    }\r\n    useEffect(() => {\r\n        if (isConnected) {\r\n            if (context.route !== routes.PROFILE) {\r\n                hide(); // Hide on connect\r\n            }\r\n        }\r\n        else {\r\n            hide(); // Hide on connect\r\n        }\r\n    }, [isConnected]);\r\n    return (_jsx(Modal, { open: context.open, pages: pages, pageId: context.route, onClose: closeable ? hide : undefined, onInfo: undefined, onBack: showBackButton ? onBack : undefined }));\r\n};\r\nexport default ConnectModal;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Modal/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/Onboarding/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/Connectors/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/MobileConnectors/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectModal/ConnectUsing.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/DownloadApp/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/Profile/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/ConnectModal/index.d.ts","writeByteOrderMark":false,"text":"declare const ConnectModal: () => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default ConnectModal;\r\n"}}
