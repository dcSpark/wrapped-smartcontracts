{"code":"/**\r\n * This is a wrapper around wagmi's useConnect hook that adds some\r\n * additional functionality.\r\n */\r\nimport { useConnect as wagmiUseConnect } from \"wagmi\";\r\nimport { useContext } from \"../components/ConnectWSC\";\r\nexport function useConnect({ ...props } = {}) {\r\n    const context = useContext();\r\n    const connectProps = {};\r\n    const { connect, connectAsync, connectors, ...rest } = wagmiUseConnect({\r\n        onError(err) {\r\n            if (err.message) {\r\n                if (err.message !== \"User rejected request\") {\r\n                    context.log(err.message, err);\r\n                }\r\n            }\r\n            else {\r\n                context.log(`Could not connect.`, err);\r\n            }\r\n        },\r\n        ...props,\r\n        /*\r\n        onSuccess: (data) => {\r\n          context.onConnect?.({\r\n            address: data.account,\r\n            //chainId: data.chain.id,\r\n            connectorId: data.connector?.id,\r\n          });\r\n        },\r\n        */\r\n    });\r\n    return {\r\n        connect: ({ ...opts }) => {\r\n            return connect({\r\n                ...opts,\r\n                ...connectProps,\r\n            });\r\n        },\r\n        connectAsync: async ({ ...opts }) => {\r\n            return await connectAsync({\r\n                ...opts,\r\n                ...connectProps,\r\n            });\r\n        },\r\n        connectors,\r\n        ...rest,\r\n    };\r\n}\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/hooks/useConnect.d.ts","writeByteOrderMark":false,"text":"/**\r\n * This is a wrapper around wagmi's useConnect hook that adds some\r\n * additional functionality.\r\n */\r\nexport declare function useConnect({ ...props }?: {}): {\r\n    data: import(\"@wagmi/core\").ConnectResult<import(\"@wagmi/core/dist/index-35b6525c\").P> | undefined;\r\n    error: Error | null;\r\n    isError: boolean;\r\n    isIdle: boolean;\r\n    isLoading: boolean;\r\n    isSuccess: boolean;\r\n    pendingConnector: import(\"@wagmi/connectors/dist/base-84a689bb\").C<any, any, any> | undefined;\r\n    reset: () => void;\r\n    status: \"error\" | \"success\" | \"loading\" | \"idle\";\r\n    variables: import(\"@wagmi/core\").ConnectArgs | undefined;\r\n    connect: ({ ...opts }: {\r\n        [x: string]: any;\r\n    }) => void;\r\n    connectAsync: ({ ...opts }: {\r\n        [x: string]: any;\r\n    }) => Promise<import(\"@wagmi/core\").ConnectResult<import(\"@wagmi/core/dist/index-35b6525c\").P>>;\r\n    connectors: import(\"@wagmi/connectors/dist/base-84a689bb\").C<any, any, any>[];\r\n};\r\n"}}
