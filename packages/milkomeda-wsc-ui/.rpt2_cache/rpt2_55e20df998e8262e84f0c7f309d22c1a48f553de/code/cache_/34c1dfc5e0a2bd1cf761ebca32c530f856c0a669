{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport React, { useEffect } from \"react\";\r\nimport { BalancesWrapper, ErrorMessage, SpinnerWrapper, StepDescription, StepTitle, SuccessWrapper, } from \"./styles\";\r\nimport Button from \"../Common/Button\";\r\nimport { useContext } from \"../ConnectWSC\";\r\nimport useInterval from \"../../hooks/useInterval\";\r\nimport { LabelWithBalance, WrapStatus } from \"./WrapStep\";\r\nimport BigNumber from \"bignumber.js\";\r\nimport { convertWeiToTokens } from \"../../utils/convertWeiToTokens\";\r\nimport { Spinner } from \"../Common/Spinner\";\r\nimport { CheckCircle2 } from \"lucide-react\";\r\nimport { TxPendingStatus } from \"milkomeda-wsc\";\r\nimport { DEFAULT_STEP_TIMEOUT } from \"./constants\";\r\nconst statusUnwrapMessages = {\r\n    [WrapStatus.Init]: \"Confirm Unwrapping\",\r\n    [WrapStatus.Pending]: \"Unwrapping your token\",\r\n    [WrapStatus.WaitingL1Confirmation]: \"Waiting for L1 confirmation\",\r\n    [WrapStatus.WaitingBridgeConfirmation]: \"Waiting for bridge confirmation\",\r\n    [WrapStatus.WaitingL2Confirmation]: \"Waiting for L2 confirmation\",\r\n    [WrapStatus.Confirmed]: \"Your asset has been successfully unwrapped!\",\r\n};\r\nconst UnwrapStep = ({ nextStep }) => {\r\n    const { wscProvider, tokens, stargateInfo, contractAddress } = useContext();\r\n    const [selectedUnwrapToken, setSelectedUnwrapToken] = React.useState(null);\r\n    const [txHash, setTxHash] = React.useState(null);\r\n    const [txStatus, setTxStatus] = React.useState(WrapStatus.Idle);\r\n    const [txStatusError, setTxStatusError] = React.useState(null);\r\n    const isIdle = txStatus === WrapStatus.Idle;\r\n    const isLoading = txStatus === WrapStatus.Init ||\r\n        txStatus === WrapStatus.Pending ||\r\n        txStatus === WrapStatus.WaitingL1Confirmation ||\r\n        txStatus === WrapStatus.WaitingBridgeConfirmation ||\r\n        txStatus === WrapStatus.WaitingL2Confirmation;\r\n    const isError = txStatus === WrapStatus.Error;\r\n    const isSuccess = txStatus === WrapStatus.Confirmed;\r\n    useInterval(async () => {\r\n        if (!wscProvider || txHash == null)\r\n            return;\r\n        const response = await wscProvider.getTxStatus(txHash);\r\n        setTxStatus(response);\r\n        if (response === statusUnwrapMessages.Confirmed) {\r\n            setTxHash(null);\r\n            setTimeout(() => {\r\n                nextStep();\r\n            }, DEFAULT_STEP_TIMEOUT);\r\n        }\r\n    }, txHash != null ? 4000 : null);\r\n    useEffect(() => {\r\n        const selectedToken = tokens.find((t) => t.contractAddress === contractAddress);\r\n        if (!selectedToken)\r\n            return;\r\n        setSelectedUnwrapToken(selectedToken);\r\n    }, [tokens, contractAddress]);\r\n    const unwrapToken = async () => {\r\n        if (!selectedUnwrapToken || !wscProvider)\r\n            return;\r\n        setTxStatus(WrapStatus.Init);\r\n        try {\r\n            const txHash = await wscProvider.unwrap(undefined, selectedUnwrapToken.contractAddress, new BigNumber(selectedUnwrapToken.balance));\r\n            setTxHash(txHash);\r\n            setTxStatus(WrapStatus.Pending);\r\n        }\r\n        catch (err) {\r\n            console.error(err);\r\n            setTxStatus(WrapStatus.Error);\r\n            if (err instanceof Error) {\r\n                setTxStatusError(err.message);\r\n            }\r\n        }\r\n    };\r\n    const fee = stargateInfo != null ? new BigNumber(stargateInfo === null || stargateInfo === void 0 ? void 0 : stargateInfo.stargateMinNativeTokenToL1) : null;\r\n    return (_jsxs(\"div\", { children: [_jsx(StepTitle, { children: \"Unwrap Tokens: Liberating Assets from Wrapper Chains\" }), _jsx(StepDescription, { children: \"Unwrap Tokens liberate assets from wrapper chains, providing users with the ability to seamlessly retrieve their original tokens from a wrapped form.\" }), _jsxs(BalancesWrapper, { children: [_jsx(LabelWithBalance, { label: \"You're moving:\", amount: (selectedUnwrapToken === null || selectedUnwrapToken === void 0 ? void 0 : selectedUnwrapToken.balance) &&\r\n                            convertWeiToTokens({\r\n                                valueWei: selectedUnwrapToken === null || selectedUnwrapToken === void 0 ? void 0 : selectedUnwrapToken.balance,\r\n                                token: selectedUnwrapToken,\r\n                            }).toFixed(), assetName: selectedUnwrapToken === null || selectedUnwrapToken === void 0 ? void 0 : selectedUnwrapToken.symbol }), _jsx(LabelWithBalance, { label: \"Unwrapping fee:\", amount: fee === null || fee === void 0 ? void 0 : fee.toFixed(), assetName: \"mADA\" })] }), isLoading && (_jsxs(_Fragment, { children: [_jsxs(SpinnerWrapper, { children: [_jsx(Spinner, {}), _jsx(\"span\", { children: statusUnwrapMessages[txStatus] })] }), _jsx(\"p\", { children: \"Unwrapping transaction may take a few minutes (~2m).\" })] })), isError && (_jsxs(ErrorMessage, { role: \"alert\", children: [\"Ups, something went wrong. \", txStatusError ? `Error: ${txStatusError}` : \"\", \" \"] })), isSuccess && (_jsxs(SuccessWrapper, { children: [_jsx(CheckCircle2, {}), _jsx(\"span\", { children: statusUnwrapMessages[TxPendingStatus.Confirmed] })] })), (isIdle || isError) && (_jsx(Button, { variant: \"primary\", onClick: unwrapToken, children: \"Confirm Unwrapping\" }))] }));\r\n};\r\nexport default UnwrapStep;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useInterval.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/WrapStep.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/bignumber.js/bignumber.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/convertWeiToTokens.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Spinner/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/lucide-react/dist/lucide-react.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/milkomeda-wsc/build/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/constants.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/TransactionStepper/UnwrapStep.d.ts","writeByteOrderMark":false,"text":"declare const UnwrapStep: ({ nextStep }: {\r\n    nextStep: any;\r\n}) => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default UnwrapStep;\r\n"}}
