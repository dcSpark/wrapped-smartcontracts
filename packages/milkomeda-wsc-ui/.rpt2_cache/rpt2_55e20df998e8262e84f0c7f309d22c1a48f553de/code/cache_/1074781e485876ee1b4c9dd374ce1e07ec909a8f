{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport React, { createContext, useEffect, useState, } from \"react\";\r\nimport ConnectWSCModal from \"./ConnectModal\";\r\nimport { useConnectCallback } from \"../hooks/useConnectCallback\";\r\nimport { useAccount } from \"wagmi\";\r\nexport const routes = {\r\n    ONBOARDING: \"onboarding\",\r\n    CONNECTORS: \"connectors\",\r\n    MOBILECONNECTORS: \"mobileConnectors\",\r\n    CONNECT: \"connect\",\r\n    DOWNLOAD: \"download\",\r\n    PROFILE: \"profile\",\r\n};\r\nexport const Context = createContext(null);\r\nexport const ConnectWSCProvider = ({ children, onConnect, onDisconnect, debugMode = false, }) => {\r\n    // Only allow for mounting ConnectKitProvider once, so we avoid weird global\r\n    // state collisions.\r\n    if (React.useContext(Context)) {\r\n        throw new Error(\"Multiple, nested usages of ConnectWSCProvider detected. Please use only one.\");\r\n    }\r\n    useConnectCallback({\r\n        onConnect,\r\n        onDisconnect,\r\n    });\r\n    // Default config options\r\n    // const defaultOptions: ConnectWSCOptions = {};\r\n    // if (typeof window !== \"undefined\") {\r\n    // Buffer Polyfill, needed for bundlers that don't provide Node polyfills (e.g CRA, Vite, etc.)\r\n    // window.Buffer = window.Buffer ?? Buffer;\r\n    // Some bundlers may need `global` and `process.env` polyfills as well\r\n    // Not implemented here to avoid unexpected behaviors, but leaving example here for future reference\r\n    /*\r\n     * window.global = window.global ?? window;\r\n     * window.process = window.process ?? { env: {} };\r\n     */\r\n    // }\r\n    const [open, setOpen] = useState(false);\r\n    const [connector, setConnector] = useState(\"\");\r\n    const [route, setRoute] = useState(routes.CONNECTORS);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n    // wsc connector\r\n    const { connector: activeConnector } = useAccount();\r\n    const [wscProvider, setWscProvider] = React.useState(null);\r\n    const [originTokens, setOriginTokens] = useState([]);\r\n    const [tokens, setTokens] = useState([]);\r\n    const [destinationBalance, setDestinationBalance] = useState(null);\r\n    const [stargateInfo, setStargateInfo] = useState(null);\r\n    const [defaultCardanoAsset, setDefaultCardanoAsset] = useState(null);\r\n    const [contractAddress, setContractAddress] = useState(\"\");\r\n    const [wscAction, setWscAction] = useState(null);\r\n    const [originAddress, setOriginAddress] = useState(null);\r\n    const [pendingTxs, setPendingTxs] = useState([]);\r\n    const [address, setAddress] = useState(null);\r\n    const [originBalance, setOriginBalance] = useState(null);\r\n    const [transactions, setTransactions] = useState([]);\r\n    const [algorandConnected, setAlgorandConnected] = useState(false);\r\n    const [cardanoConnected, setCardanoConnected] = useState(false);\r\n    const [network, setNetwork] = useState(null);\r\n    useEffect(() => {\r\n        var _a;\r\n        if (!((_a = activeConnector === null || activeConnector === void 0 ? void 0 : activeConnector.id) === null || _a === void 0 ? void 0 : _a.includes(\"wsc\")))\r\n            return;\r\n        const loadWscProvider = async () => {\r\n            try {\r\n                const provider = await activeConnector.getProvider();\r\n                if (!provider)\r\n                    return;\r\n                const originTokens = await provider.origin_getTokenBalances();\r\n                const tokenBalances = await provider.getTokenBalances();\r\n                const destinationBalance = await provider.eth_getBalance();\r\n                const stargate = await provider.stargateObject();\r\n                setWscProvider(provider);\r\n                setOriginTokens(originTokens);\r\n                setTokens(tokenBalances !== null && tokenBalances !== void 0 ? tokenBalances : []);\r\n                setDestinationBalance(destinationBalance);\r\n                setStargateInfo(stargate);\r\n            }\r\n            catch (e) {\r\n                console.log(e);\r\n            }\r\n        };\r\n        loadWscProvider();\r\n    }, [activeConnector, wscProvider]);\r\n    useEffect(() => setErrorMessage(null), [route, open]);\r\n    // eslint-disable-next-line @typescript-eslint/no-empty-function\r\n    const log = debugMode ? console.log : () => { };\r\n    const value = {\r\n        open,\r\n        setOpen,\r\n        route,\r\n        setRoute,\r\n        connector,\r\n        setConnector,\r\n        onConnect,\r\n        // wsc provider\r\n        wscProvider,\r\n        originTokens,\r\n        stargateInfo,\r\n        tokens,\r\n        //\r\n        defaultCardanoAsset,\r\n        setDefaultCardanoAsset,\r\n        contractAddress,\r\n        setContractAddress,\r\n        wscAction,\r\n        setWscAction,\r\n        // Other configuration\r\n        errorMessage,\r\n        debugMode,\r\n        log,\r\n        displayError: (message, code) => {\r\n            setErrorMessage(message);\r\n            console.log(\"---------CONNECTWSC DEBUG---------\");\r\n            console.log(message);\r\n            if (code)\r\n                console.table(code);\r\n            console.log(\"---------/CONNECTWSC DEBUG---------\");\r\n        },\r\n    };\r\n    return (_jsxs(Context.Provider, { value: value, children: [children, _jsx(ConnectWSCModal, {})] }));\r\n};\r\nexport const useContext = () => {\r\n    const context = React.useContext(Context);\r\n    if (!context)\r\n        throw Error(\"ConnectWSC Hook must be inside a Provider.\");\r\n    return context;\r\n};\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/styles/defaultTheme.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectModal/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/styled-components/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useConnectCallback.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/milkomeda-wsc/build/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/ConnectWSC.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\nimport { useConnectCallbackProps } from \"../hooks/useConnectCallback\";\r\nimport { WSCLib } from \"milkomeda-wsc\";\r\nexport declare const routes: {\r\n    ONBOARDING: string;\r\n    CONNECTORS: string;\r\n    MOBILECONNECTORS: string;\r\n    CONNECT: string;\r\n    DOWNLOAD: string;\r\n    PROFILE: string;\r\n};\r\ntype Connector = any;\r\ntype Error = string | React.ReactNode | null;\r\nexport type DefaultCardanoAsset = {\r\n    unit: string;\r\n    amount: number;\r\n};\r\ntype StargateInfo = {\r\n    fromNativeTokenInLoveLaceOrMicroAlgo: string;\r\n    stargateMinNativeTokenFromL1: number;\r\n    stargateMinNativeTokenToL1: number;\r\n    stargateNativeTokenFeeToL1: number;\r\n};\r\ntype WSCAction = () => Promise<void>;\r\ntype WSCContext = {\r\n    wscProvider: WSCLib | null;\r\n    originTokens: any;\r\n    tokens: any;\r\n    stargateInfo: StargateInfo | null;\r\n    defaultCardanoAsset: DefaultCardanoAsset | null;\r\n    setDefaultCardanoAsset: React.Dispatch<React.SetStateAction<DefaultCardanoAsset | null>>;\r\n    contractAddress: string;\r\n    setContractAddress: React.Dispatch<React.SetStateAction<string>>;\r\n    wscAction: WSCAction | null;\r\n    setWscAction: React.Dispatch<React.SetStateAction<WSCAction | null>>;\r\n};\r\ntype ContextValue = {\r\n    open: boolean;\r\n    setOpen: React.Dispatch<React.SetStateAction<boolean>>;\r\n    route: string;\r\n    setRoute: React.Dispatch<React.SetStateAction<string>>;\r\n    connector: string;\r\n    setConnector: React.Dispatch<React.SetStateAction<Connector>>;\r\n    errorMessage: Error;\r\n    debugMode?: boolean;\r\n    log: (...props: any) => void;\r\n    displayError: (message: string | React.ReactNode | null, code?: any) => void;\r\n} & useConnectCallbackProps & WSCContext;\r\nexport declare const Context: React.Context<ContextValue | null>;\r\ntype ConnectKitProviderProps = {\r\n    children?: React.ReactNode;\r\n    debugMode?: boolean;\r\n} & useConnectCallbackProps;\r\nexport declare const ConnectWSCProvider: React.FC<ConnectKitProviderProps>;\r\nexport declare const useContext: () => ContextValue;\r\nexport {};\r\n"}}
