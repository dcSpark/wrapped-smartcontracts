{"code":"import { detect } from \"detect-browser\";\r\nimport React from \"react\";\r\nimport supportedConnectors from \"../constants/supportedConnectors\";\r\nconst truncateRegex = /^(0x[a-zA-Z0-9]{4})[a-zA-Z0-9]+([a-zA-Z0-9]{4})$/;\r\nconst truncateEthAddress = (address, separator = \"••••\") => {\r\n    if (!address)\r\n        return \"\";\r\n    const match = address.match(truncateRegex);\r\n    if (!match)\r\n        return address;\r\n    return `${match[1]}${separator}${match[2]}`;\r\n};\r\nconst truncateENSAddress = (ensName, maxLength) => {\r\n    if (ensName.length > maxLength) {\r\n        return ensName.replace(\".eth\", \"\").slice(0, maxLength) + \"...\";\r\n    }\r\n    else {\r\n        return ensName;\r\n    }\r\n};\r\nconst nFormatter = (num, digits = 2) => {\r\n    if (num < 10000)\r\n        return num.toFixed(2);\r\n    const lookup = [\r\n        { value: 1, symbol: \"\" },\r\n        { value: 1e3, symbol: \"k\" },\r\n        { value: 1e6, symbol: \"m\" },\r\n        { value: 1e9, symbol: \"g\" },\r\n        { value: 1e12, symbol: \"t\" },\r\n        { value: 1e15, symbol: \"p\" },\r\n        { value: 1e18, symbol: \"e\" },\r\n    ];\r\n    const rx = /\\.0+$|(\\.[0-9]*[1-9])0+$/;\r\n    const item = lookup\r\n        .slice()\r\n        .reverse()\r\n        .find(function (item) {\r\n        return num >= item.value;\r\n    });\r\n    return item ? (num / item.value).toFixed(digits).replace(rx, \"$1\") + item.symbol : \"0\";\r\n};\r\nconst detectBrowser = () => {\r\n    var _a;\r\n    const browser = detect();\r\n    return (_a = browser === null || browser === void 0 ? void 0 : browser.name) !== null && _a !== void 0 ? _a : \"\";\r\n};\r\nconst detectOS = () => {\r\n    var _a;\r\n    const browser = detect();\r\n    return (_a = browser === null || browser === void 0 ? void 0 : browser.os) !== null && _a !== void 0 ? _a : \"\";\r\n};\r\nconst isIOS = () => {\r\n    const os = detectOS();\r\n    return os.toLowerCase().includes(\"ios\");\r\n};\r\nconst isAndroid = () => {\r\n    const os = detectOS();\r\n    return os.toLowerCase().includes(\"android\");\r\n};\r\nconst isMobile = () => {\r\n    return isAndroid() || isIOS();\r\n};\r\nconst getWalletDownloadUri = (connectorId) => {\r\n    var _a;\r\n    return (_a = getMobileAppUri(connectorId)) !== null && _a !== void 0 ? _a : getBrowserAppUri(connectorId);\r\n};\r\nconst getMobileAppUri = (connectorId) => {\r\n    var _a, _b;\r\n    const c = supportedConnectors.filter((c) => c.id === connectorId)[0];\r\n    if (isIOS()) {\r\n        return ((_a = c.appUrls) === null || _a === void 0 ? void 0 : _a.ios) ? c.appUrls.ios : \"\";\r\n    }\r\n    else if (isAndroid()) {\r\n        return ((_b = c.appUrls) === null || _b === void 0 ? void 0 : _b.android) ? c.appUrls.android : \"\";\r\n    }\r\n    return \"\";\r\n};\r\nconst getBrowserAppUri = (connectorId) => {\r\n    var _a, _b, _c, _d;\r\n    const c = supportedConnectors.filter((c) => c.id === connectorId)[0];\r\n    const browser = detectBrowser();\r\n    switch (browser) {\r\n        case \"firefox\":\r\n            return ((_a = c.appUrls) === null || _a === void 0 ? void 0 : _a.firefox) ? c.appUrls.firefox : \"\";\r\n        case \"safari\":\r\n            return ((_b = c.appUrls) === null || _b === void 0 ? void 0 : _b.safari) ? c.appUrls.safari : \"\";\r\n        default:\r\n            return ((_c = c.extensions) === null || _c === void 0 ? void 0 : _c.chrome) ? (_d = c.extensions) === null || _d === void 0 ? void 0 : _d.chrome : \"\";\r\n    }\r\n};\r\nconst isFlint = () => {\r\n    if (typeof window === \"undefined\")\r\n        return false;\r\n    const { cardano } = window;\r\n    if (!cardano)\r\n        return false;\r\n    const isFlint = Boolean(cardano.flint);\r\n    if (isFlint)\r\n        return true;\r\n};\r\nconst isEternl = () => {\r\n    if (typeof window === \"undefined\")\r\n        return false;\r\n    const { cardano } = window;\r\n    if (!cardano)\r\n        return false;\r\n    const isEternl = Boolean(cardano.eternl);\r\n    if (isEternl)\r\n        return true;\r\n};\r\nfunction flattenChildren(children) {\r\n    const childrenArray = React.Children.toArray(children);\r\n    return childrenArray.reduce((flatChildren, child) => {\r\n        if (child.type === React.Fragment) {\r\n            return flatChildren.concat(flattenChildren(child.props.children));\r\n        }\r\n        flatChildren.push(child);\r\n        return flatChildren;\r\n    }, []);\r\n}\r\nexport { nFormatter, truncateEthAddress, truncateENSAddress, isMobile, isAndroid, detectBrowser, detectOS, getWalletDownloadUri, isFlint, isEternl, flattenChildren, };\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/detect-browser/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/constants/supportedConnectors.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/utils/index.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"node\" />\r\nimport React from \"react\";\r\ndeclare const truncateEthAddress: (address?: string, separator?: string) => string;\r\ndeclare const truncateENSAddress: (ensName: string, maxLength: number) => string;\r\ndeclare const nFormatter: (num: number, digits?: number) => string;\r\ndeclare const detectBrowser: () => \"\" | import(\"detect-browser\").Browser | \"bot\" | \"node\" | \"react-native\";\r\ndeclare const detectOS: () => \"\" | import(\"detect-browser\").OperatingSystem | NodeJS.Platform;\r\ndeclare const isAndroid: () => boolean;\r\ndeclare const isMobile: () => boolean;\r\ndeclare const getWalletDownloadUri: (connectorId: string) => string;\r\ndeclare const isFlint: () => boolean | undefined;\r\ndeclare const isEternl: () => boolean | undefined;\r\ntype ReactChildArray = ReturnType<typeof React.Children.toArray>;\r\ndeclare function flattenChildren(children: React.ReactNode): ReactChildArray;\r\nexport { nFormatter, truncateEthAddress, truncateENSAddress, isMobile, isAndroid, detectBrowser, detectOS, getWalletDownloadUri, isFlint, isEternl, flattenChildren, };\r\n"}}
