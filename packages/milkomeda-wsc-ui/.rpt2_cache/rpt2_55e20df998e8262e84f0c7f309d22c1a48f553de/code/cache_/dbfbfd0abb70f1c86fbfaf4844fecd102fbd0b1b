{"code":"import { useEffect, useRef } from \"react\";\r\nconst useInterval = (callback, delay) => {\r\n    const savedCallback = useRef(callback);\r\n    useEffect(() => {\r\n        savedCallback.current = callback;\r\n    }, [callback]);\r\n    useEffect(() => {\r\n        if (!delay && delay !== 0) {\r\n            return;\r\n        }\r\n        const id = setInterval(() => savedCallback.current(), delay);\r\n        return () => clearInterval(id);\r\n    }, [delay]);\r\n};\r\nexport default useInterval;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/hooks/useInterval.d.ts","writeByteOrderMark":false,"text":"declare const useInterval: (callback: any, delay: any) => void;\r\nexport default useInterval;\r\n"}}
