{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport { useCallback, useEffect, useRef, useState } from \"react\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { ResetContainer } from \"../../../styles\";\r\nimport Portal from \"../Portal\";\r\nimport { isMobile } from \"../../../utils\";\r\nimport { Container, BoxContainer, ModalContainer, PageContainer, PageContents, ControllerContainer, InnerContainer, BackgroundOverlay, CloseButton, BackButton, InfoButton, ModalHeading, TextWithHr, ErrorMessage, } from \"./styles\";\r\nimport { routes, useContext } from \"../../ConnectWSC\";\r\nimport { useTransition } from \"react-transition-state\";\r\nimport FocusTrap from \"../../../hooks/useFocusTrap\";\r\nimport { supportedConnectors } from \"../../../index\";\r\nimport usePrevious from \"../../../hooks/usePrevious\";\r\nimport { useNetwork, useSwitchNetwork } from \"wagmi\";\r\nimport { AuthIcon } from \"../../../assets/icons\";\r\nimport FitText from \"../FitText\";\r\nconst ProfileIcon = ({ isSignedIn }) => (_jsxs(\"div\", { style: { position: \"relative\" }, children: [isSignedIn ? (_jsx(AuthIcon, { style: {\r\n                bottom: -1,\r\n                right: -1,\r\n            } })) : (_jsx(\"div\", { style: {\r\n                zIndex: 2,\r\n                position: \"absolute\",\r\n                top: -2,\r\n                right: -2,\r\n                background: \"#1A88F8\",\r\n                borderRadius: 8,\r\n                boxShadow: \"0 0 0 2px var(--ck-body-background)\",\r\n                width: 8,\r\n                height: 8,\r\n            } })), _jsxs(\"svg\", { \"aria-hidden\": \"true\", width: \"20\", height: \"20\", viewBox: \"0 0 20 20\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", style: { overflow: \"visible\" }, children: [_jsx(\"circle\", { cx: \"10\", cy: \"10\", r: \"9\", stroke: \"currentColor\", strokeWidth: \"2\" }), _jsx(\"path\", { d: \"M16.5 16.775C14.8618 15.0649 12.5552 14 10 14C7.44477 14 5.13825 15.0649 3.5 16.775\", stroke: \"currentColor\", strokeWidth: \"2\" }), _jsx(\"circle\", { cx: \"10\", cy: \"8\", r: \"3\", stroke: \"currentColor\", strokeWidth: \"2\" })] })] }));\r\nconst InfoIcon = ({ ...props }) => (_jsx(\"svg\", { \"aria-hidden\": \"true\", width: \"22\", height: \"22\", viewBox: \"0 0 22 22\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: _jsx(\"path\", { fillRule: \"evenodd\", clipRule: \"evenodd\", d: \"M20 11C20 15.9706 15.9706 20 11 20C6.02944 20 2 15.9706 2 11C2 6.02944 6.02944 2 11 2C15.9706 2 20 6.02944 20 11ZM22 11C22 17.0751 17.0751 22 11 22C4.92487 22 0 17.0751 0 11C0 4.92487 4.92487 0 11 0C17.0751 0 22 4.92487 22 11ZM11.6445 12.7051C11.6445 13.1348 11.3223 13.4678 10.7744 13.4678C10.2266 13.4678 9.92578 13.1885 9.92578 12.6191V12.4795C9.92578 11.4268 10.4951 10.8574 11.2686 10.3203C12.2031 9.67578 12.665 9.32129 12.665 8.59082C12.665 7.76367 12.0205 7.21582 11.043 7.21582C10.3232 7.21582 9.80762 7.57031 9.45312 8.16113C9.38282 8.24242 9.32286 8.32101 9.2667 8.39461C9.04826 8.68087 8.88747 8.8916 8.40039 8.8916C8.0459 8.8916 7.66992 8.62305 7.66992 8.15039C7.66992 7.96777 7.70215 7.7959 7.75586 7.61328C8.05664 6.625 9.27051 5.75488 11.1182 5.75488C12.9336 5.75488 14.5234 6.71094 14.5234 8.50488C14.5234 9.7832 13.7822 10.417 12.7402 11.1045C11.999 11.5986 11.6445 11.9746 11.6445 12.5762V12.7051ZM11.9131 15.5625C11.9131 16.1855 11.376 16.6797 10.7529 16.6797C10.1299 16.6797 9.59277 16.1748 9.59277 15.5625C9.59277 14.9395 10.1191 14.4453 10.7529 14.4453C11.3867 14.4453 11.9131 14.9287 11.9131 15.5625Z\", fill: \"currentColor\" }) }));\r\nconst CloseIcon = ({ ...props }) => (_jsxs(motion.svg, { width: 14, height: 14, viewBox: \"0 0 14 14\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: [_jsx(\"path\", { d: \"M1 13L13 1\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\" }), _jsx(\"path\", { d: \"M1 0.999999L13 13\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\" })] }));\r\nconst BackIcon = ({ ...props }) => (_jsx(motion.svg, { width: 9, height: 16, viewBox: \"0 0 9 16\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", ...props, children: _jsx(\"path\", { d: \"M8 1L1 8L8 15\", stroke: \"currentColor\", strokeWidth: \"2\", strokeLinecap: \"round\", strokeLinejoin: \"round\" }) }));\r\nconst contentTransitionDuration = 0.22;\r\nexport const contentVariants = {\r\n    initial: {\r\n        //willChange: 'transform,opacity',\r\n        zIndex: 2,\r\n        opacity: 0,\r\n    },\r\n    animate: {\r\n        opacity: 1,\r\n        scale: 1,\r\n        transition: {\r\n            duration: contentTransitionDuration * 0.75,\r\n            delay: contentTransitionDuration * 0.25,\r\n            ease: [0.26, 0.08, 0.25, 1],\r\n        },\r\n    },\r\n    exit: {\r\n        zIndex: 1,\r\n        opacity: 0,\r\n        pointerEvents: \"none\",\r\n        position: \"absolute\",\r\n        left: [\"50%\", \"50%\"],\r\n        x: [\"-50%\", \"-50%\"],\r\n        transition: {\r\n            duration: contentTransitionDuration,\r\n            ease: [0.26, 0.08, 0.25, 1],\r\n        },\r\n    },\r\n};\r\nconst Modal = ({ open, pages, pageId, positionInside, inline, onClose, onBack, onInfo, }) => {\r\n    const context = useContext();\r\n    const mobile = isMobile();\r\n    const connector = supportedConnectors.find((x) => x.id === context.connector);\r\n    const [state, setOpen] = useTransition({\r\n        timeout: mobile ? 160 : 160,\r\n        preEnter: true,\r\n        mountOnEnter: true,\r\n        unmountOnExit: true,\r\n    });\r\n    const mounted = !(state === \"exited\" || state === \"unmounted\");\r\n    const rendered = state === \"preEnter\" || state !== \"exiting\";\r\n    const currentDepth = context.route === routes.CONNECTORS ? 0 : context.route === routes.DOWNLOAD ? 2 : 1;\r\n    const prevDepth = usePrevious(currentDepth, currentDepth);\r\n    const prevPage = usePrevious(pageId, pageId);\r\n    useEffect(() => {\r\n        setOpen(open);\r\n        if (open)\r\n            setInTransition(undefined);\r\n    }, [open]);\r\n    const [dimensions, setDimensions] = useState({\r\n        width: undefined,\r\n        height: undefined,\r\n    });\r\n    const [inTransition, setInTransition] = useState(undefined);\r\n    // Calculate new content bounds\r\n    const updateBounds = (node) => {\r\n        const bounds = {\r\n            width: node === null || node === void 0 ? void 0 : node.offsetWidth,\r\n            height: node === null || node === void 0 ? void 0 : node.offsetHeight,\r\n        };\r\n        setDimensions({\r\n            width: `${bounds === null || bounds === void 0 ? void 0 : bounds.width}px`,\r\n            height: `${bounds === null || bounds === void 0 ? void 0 : bounds.height}px`,\r\n        });\r\n    };\r\n    let blockTimeout;\r\n    const contentRef = useCallback((node) => {\r\n        if (!node)\r\n            return;\r\n        ref.current = node;\r\n        // Avoid transition mixups\r\n        setInTransition(inTransition === undefined ? false : true);\r\n        clearTimeout(blockTimeout);\r\n        blockTimeout = setTimeout(() => setInTransition(false), 360);\r\n        // Calculate new content bounds\r\n        updateBounds(node);\r\n    }, [open, inTransition]);\r\n    // Update layout on chain/network switch to avoid clipping\r\n    const { chain } = useNetwork();\r\n    const { switchNetwork } = useSwitchNetwork();\r\n    const ref = useRef(null);\r\n    useEffect(() => {\r\n        if (ref.current)\r\n            updateBounds(ref.current);\r\n    }, [chain, switchNetwork, mobile]);\r\n    useEffect(() => {\r\n        if (!mounted) {\r\n            setDimensions({\r\n                width: undefined,\r\n                height: undefined,\r\n            });\r\n            return;\r\n        }\r\n        const listener = (e) => {\r\n            if (e.key === \"Escape\" && onClose)\r\n                onClose();\r\n        };\r\n        document.addEventListener(\"keydown\", listener);\r\n        return () => {\r\n            document.removeEventListener(\"keydown\", listener);\r\n        };\r\n    }, [mounted, onClose]);\r\n    const dimensionsCSS = {\r\n        \"--height\": dimensions.height,\r\n        \"--width\": dimensions.width,\r\n    };\r\n    function shouldUseQrcode() {\r\n        const c = supportedConnectors.filter((x) => x.id === context.connector)[0];\r\n        if (!c)\r\n            return false; // Fail states are shown in the injector flow\r\n        const hasExtensionInstalled = c.extensionIsInstalled && c.extensionIsInstalled();\r\n        const useInjector = !c.scannable || hasExtensionInstalled;\r\n        return !useInjector;\r\n    }\r\n    function getHeading() {\r\n        switch (context.route) {\r\n            case routes.CONNECT:\r\n                if (shouldUseQrcode()) {\r\n                    return \"Connect\";\r\n                }\r\n                else {\r\n                    return connector === null || connector === void 0 ? void 0 : connector.name;\r\n                }\r\n            case routes.CONNECTORS:\r\n                return \"Connectors\";\r\n            case routes.MOBILECONNECTORS:\r\n                return \"Mobile connectors\";\r\n            case routes.DOWNLOAD:\r\n                return \"download\";\r\n            case routes.ONBOARDING:\r\n                return \"onboarding\";\r\n            case routes.PROFILE:\r\n                return \"Buy Milkomeda-C1 Djed Osiris Dollar\"; // TODO: fix it\r\n            default:\r\n                return \"\";\r\n        }\r\n    }\r\n    const Content = (_jsx(ResetContainer, { children: _jsxs(ModalContainer, { role: \"dialog\", style: {\r\n                pointerEvents: rendered ? \"auto\" : \"none\",\r\n                position: positionInside ? \"absolute\" : undefined,\r\n            }, children: [!inline && _jsx(BackgroundOverlay, { \"$active\": rendered, onClick: onClose }), _jsxs(Container, { style: dimensionsCSS, initial: false, children: [_jsx(\"div\", { style: {\r\n                                pointerEvents: inTransition ? \"all\" : \"none\",\r\n                                position: \"absolute\",\r\n                                top: 0,\r\n                                bottom: 0,\r\n                                left: \"50%\",\r\n                                transform: \"translateX(-50%)\",\r\n                                width: \"var(--width)\",\r\n                                zIndex: 9,\r\n                                transition: \"width 200ms ease\",\r\n                            } }), _jsxs(BoxContainer, { className: `${rendered && \"active\"}`, children: [_jsx(AnimatePresence, { initial: false }), _jsx(AnimatePresence, { initial: false, children: context.errorMessage && (_jsxs(ErrorMessage, { initial: { y: \"10%\", x: \"-50%\" }, animate: { y: \"-100%\" }, exit: { y: \"100%\" }, transition: { duration: 0.2, ease: \"easeInOut\" }, children: [_jsx(\"span\", { children: context.errorMessage }), _jsx(\"div\", { onClick: () => context.displayError(null), style: {\r\n                                                    position: \"absolute\",\r\n                                                    right: 24,\r\n                                                    top: 24,\r\n                                                    cursor: \"pointer\",\r\n                                                }, children: _jsx(CloseIcon, {}) })] })) }), _jsxs(ControllerContainer, { children: [onClose && (_jsx(CloseButton, { onClick: onClose, children: _jsx(CloseIcon, {}) })), _jsx(\"div\", { style: {\r\n                                                position: \"absolute\",\r\n                                                top: 23,\r\n                                                left: 20,\r\n                                                width: 32,\r\n                                                height: 32,\r\n                                            }, children: _jsx(AnimatePresence, { children: onBack ? (_jsx(BackButton, { disabled: inTransition, onClick: onBack, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\r\n                                                        duration: mobile ? 0 : 0.1,\r\n                                                        delay: mobile ? 0.01 : 0,\r\n                                                    }, children: _jsx(BackIcon, {}) }, \"backButton\")) : (context.route === routes.PROFILE &&\r\n                                                    onInfo && (_jsx(InfoButton, { disabled: inTransition, onClick: onInfo, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\r\n                                                        duration: mobile ? 0 : 0.1,\r\n                                                        delay: mobile ? 0.01 : 0,\r\n                                                    }, children: _jsx(InfoIcon, {}) }, \"infoButton\"))) }) })] }), _jsx(ModalHeading, { children: _jsx(AnimatePresence, { children: _jsx(motion.div, { style: {\r\n                                                position: \"absolute\",\r\n                                                top: 0,\r\n                                                bottom: 0,\r\n                                                left: 52,\r\n                                                right: 52,\r\n                                                display: \"flex\",\r\n                                                //alignItems: 'center',\r\n                                                justifyContent: \"center\",\r\n                                            }, initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, transition: {\r\n                                                duration: mobile ? 0 : 0.17,\r\n                                                delay: mobile ? 0.01 : 0,\r\n                                            }, children: _jsx(FitText, { children: getHeading() }) }, `${context.route}`) }) }), _jsx(InnerContainer, { children: Object.keys(pages).map((key) => {\r\n                                        const page = pages[key];\r\n                                        return (\r\n                                        // TODO: We may need to use the follow check avoid unnecessary computations, but this causes a bug where the content flashes\r\n                                        // (key === pageId || key === prevPage) && (\r\n                                        _jsx(Page, { open: key === pageId, initial: !positionInside && state !== \"entered\", enterAnim: key === pageId\r\n                                                ? currentDepth > prevDepth\r\n                                                    ? \"active-scale-up\"\r\n                                                    : \"active\"\r\n                                                : \"\", exitAnim: key !== pageId ? (currentDepth < prevDepth ? \"exit-scale-down\" : \"exit\") : \"\", children: _jsx(PageContents, { ref: contentRef, style: {\r\n                                                    pointerEvents: key === pageId && rendered ? \"auto\" : \"none\",\r\n                                                }, children: page }, `inner-${key}`) }, key));\r\n                                    }) })] })] })] }) }));\r\n    return (_jsx(_Fragment, { children: mounted && (_jsx(_Fragment, { children: positionInside ? (Content) : (_jsx(_Fragment, { children: _jsx(Portal, { children: _jsx(FocusTrap, { children: Content }) }) })) })) }));\r\n};\r\nconst Page = ({ children, open, initial, prevDepth, currentDepth, enterAnim, exitAnim, }) => {\r\n    const [state, setOpen] = useTransition({\r\n        timeout: 400,\r\n        preEnter: true,\r\n        initialEntered: open,\r\n        mountOnEnter: true,\r\n        unmountOnExit: true,\r\n    });\r\n    const mounted = !(state === \"exited\" || state === \"unmounted\");\r\n    const rendered = state === \"preEnter\" || state !== \"exiting\";\r\n    useEffect(() => {\r\n        setOpen(open);\r\n    }, [open]);\r\n    if (!mounted)\r\n        return null;\r\n    return (_jsx(PageContainer, { className: `${rendered ? enterAnim : exitAnim}`, style: {\r\n            animationDuration: initial ? \"0ms\" : undefined,\r\n            animationDelay: initial ? \"0ms\" : undefined,\r\n        }, children: children }));\r\n};\r\nexport const OrDivider = ({ children }) => {\r\n    return (_jsx(TextWithHr, { children: _jsx(\"span\", { children: children }) }));\r\n};\r\nexport default Modal;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/framer-motion/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/styles/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Portal/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Modal/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/react-transition-state/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useFocusTrap.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/usePrevious.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/assets/icons.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/FitText/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/Modal/index.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\nimport { Variants } from \"framer-motion\";\r\nexport declare const contentVariants: Variants;\r\ntype ModalProps = {\r\n    open?: boolean;\r\n    pages: any;\r\n    pageId: string;\r\n    positionInside?: boolean;\r\n    inline?: boolean;\r\n    onClose?: () => void;\r\n    onBack?: () => void;\r\n    onInfo?: () => void;\r\n};\r\ndeclare const Modal: React.FC<ModalProps>;\r\nexport declare const OrDivider: ({ children }: {\r\n    children?: React.ReactNode;\r\n}) => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default Modal;\r\n"}}
