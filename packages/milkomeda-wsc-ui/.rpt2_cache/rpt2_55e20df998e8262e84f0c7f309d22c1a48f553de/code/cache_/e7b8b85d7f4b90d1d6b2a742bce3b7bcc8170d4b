{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport { useEffect, useLayoutEffect, useRef, useState } from \"react\";\r\nimport { useContext } from \"../../ConnectWSC\";\r\nimport useMeasure from \"react-use-measure\";\r\nimport { TooltipWindow, TooltipContainer, TooltipTail } from \"./styles\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { ResetContainer } from \"../../../styles\";\r\nimport Portal from \"../Portal\";\r\nconst Tooltip = ({ children, message, open, xOffset = 0, yOffset = 0, delay, }) => {\r\n    const context = useContext();\r\n    const [isOpen, setIsOpen] = useState(false);\r\n    const [outOfBounds, setOutOfBounds] = useState(false);\r\n    const [size, setSize] = useState(\"small\");\r\n    const [ready, setReady] = useState(false);\r\n    const [currentRoute] = useState(context.route);\r\n    const targetRef = useRef(null);\r\n    const [ref, bounds] = useMeasure({\r\n        debounce: !ready ? 220 : 0,\r\n        offsetSize: true,\r\n        scroll: true,\r\n    });\r\n    const checkBounds = () => {\r\n        let flag = false;\r\n        const x = xOffset + bounds.left + bounds.width;\r\n        const y = yOffset + bounds.top + bounds.height * 0.5;\r\n        if (x > window.innerWidth || x < 0 || y > window.innerHeight || y < 0) {\r\n            flag = true;\r\n        }\r\n        return flag;\r\n    };\r\n    const useIsomorphicLayoutEffect = typeof window !== \"undefined\" ? useLayoutEffect : useEffect;\r\n    const refreshLayout = () => {\r\n        if (!targetRef.current ||\r\n            bounds.top + bounds.bottom + bounds.left + bounds.right + bounds.height + bounds.width === 0)\r\n            return;\r\n        const x = xOffset + bounds.left + bounds.width;\r\n        const y = yOffset + bounds.top + bounds.height * 0.5;\r\n        if (!ready && x !== 0 && y !== 0)\r\n            setReady(true);\r\n        targetRef.current.style.left = `${x}px`;\r\n        targetRef.current.style.top = `${y}px`;\r\n        setSize(targetRef.current.offsetHeight <= 40 ? \"small\" : \"large\");\r\n        setOutOfBounds(checkBounds());\r\n    };\r\n    useIsomorphicLayoutEffect(refreshLayout, [bounds, open, isOpen]);\r\n    useEffect(() => {\r\n        if (!context.open)\r\n            setIsOpen(false);\r\n    }, [context.open]);\r\n    useEffect(() => {\r\n        setIsOpen(!!open);\r\n    }, [open]);\r\n    return (_jsxs(_Fragment, { children: [_jsx(motion.div, { ref: ref, style: open === undefined\r\n                    ? {\r\n                        cursor: \"help\",\r\n                    }\r\n                    : {}, onHoverStart: () => setIsOpen(true), onHoverEnd: () => setIsOpen(false), onClick: () => setIsOpen(false), children: children }), _jsx(Portal, { children: _jsx(AnimatePresence, { children: currentRoute === context.route && !outOfBounds && isOpen && (_jsx(ResetContainer, { children: _jsx(TooltipWindow, { children: _jsxs(TooltipContainer, { role: \"tooltip\", \"$size\": size, ref: targetRef, initial: \"collapsed\", animate: ready ? \"open\" : {}, exit: \"collapsed\", variants: {\r\n                                    collapsed: {\r\n                                        transformOrigin: \"20px 50%\",\r\n                                        opacity: 0,\r\n                                        scale: 0.9,\r\n                                        z: 0.01,\r\n                                        y: \"-50%\",\r\n                                        x: 20,\r\n                                        transition: {\r\n                                            duration: 0.1,\r\n                                        },\r\n                                    },\r\n                                    open: {\r\n                                        willChange: \"opacity,transform\",\r\n                                        opacity: 1,\r\n                                        scale: 1,\r\n                                        z: 0.01,\r\n                                        y: \"-50%\",\r\n                                        x: 20,\r\n                                        transition: {\r\n                                            ease: [0.76, 0, 0.24, 1],\r\n                                            duration: 0.15,\r\n                                            delay: delay ? delay : 0.5,\r\n                                        },\r\n                                    },\r\n                                }, children: [message, _jsx(TooltipTail, { \"$size\": size })] }) }) })) }) })] }));\r\n};\r\nexport default Tooltip;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/react-use-measure/types/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Tooltip/types.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Tooltip/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/framer-motion/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/styles/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Portal/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/Tooltip/index.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\nimport { TooltipProps } from \"./types\";\r\ndeclare const Tooltip: React.FC<TooltipProps>;\r\nexport default Tooltip;\r\n"}}
