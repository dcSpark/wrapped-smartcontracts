{"code":"// https://github.com/saltycrane/use-fit-text\r\nimport { useCallback, useEffect, useLayoutEffect, useRef, useState, } from 'react';\r\nimport ResizeObserver from 'resize-observer-polyfill';\r\nconst LOG_LEVEL = {\r\n    debug: 10,\r\n    info: 20,\r\n    warn: 30,\r\n    error: 40,\r\n    none: 100,\r\n};\r\n// Suppress `useLayoutEffect` warning when rendering on the server\r\n// https://gist.github.com/gaearon/e7d97cdf38a2907924ea12e4ebdf3c85\r\nconst useIsoLayoutEffect = typeof window !== 'undefined' &&\r\n    window.document &&\r\n    window.document.createElement !== undefined\r\n    ? useLayoutEffect\r\n    : useEffect;\r\nconst useFitText = ({ logLevel: logLevelOption = 'info', maxFontSize = 100, minFontSize = 20, onFinish, onStart, resolution = 5, } = {}) => {\r\n    const logLevel = LOG_LEVEL[logLevelOption];\r\n    const initState = useCallback(() => {\r\n        return {\r\n            calcKey: 0,\r\n            fontSize: maxFontSize,\r\n            fontSizePrev: minFontSize,\r\n            fontSizeMax: maxFontSize,\r\n            fontSizeMin: minFontSize,\r\n        };\r\n    }, [maxFontSize, minFontSize]);\r\n    const ref = useRef(null);\r\n    const innerHtmlPrevRef = useRef();\r\n    const isCalculatingRef = useRef(false);\r\n    const [state, setState] = useState(initState);\r\n    const { calcKey, fontSize, fontSizeMax, fontSizeMin, fontSizePrev } = state;\r\n    // Montior div size changes and recalculate on resize\r\n    let animationFrameId = null;\r\n    const [ro] = useState(() => new ResizeObserver(() => {\r\n        animationFrameId = window.requestAnimationFrame(() => {\r\n            if (isCalculatingRef.current) {\r\n                return;\r\n            }\r\n            onStart && onStart();\r\n            isCalculatingRef.current = true;\r\n            // `calcKey` is used in the dependencies array of\r\n            // `useIsoLayoutEffect` below. It is incremented so that the font size\r\n            // will be recalculated even if the previous state didn't change (e.g.\r\n            // when the text fit initially).\r\n            setState({\r\n                ...initState(),\r\n                calcKey: calcKey + 1,\r\n            });\r\n        });\r\n    }));\r\n    useEffect(() => {\r\n        if (ref.current) {\r\n            ro.observe(ref.current);\r\n        }\r\n        return () => {\r\n            animationFrameId && window.cancelAnimationFrame(animationFrameId);\r\n            ro.disconnect();\r\n        };\r\n    }, [animationFrameId, ro]);\r\n    // Recalculate when the div contents change\r\n    const innerHtml = ref.current && ref.current.innerHTML;\r\n    useEffect(() => {\r\n        if (calcKey === 0 || isCalculatingRef.current)\r\n            return;\r\n        if (innerHtml !== innerHtmlPrevRef.current) {\r\n            onStart && onStart();\r\n            setState({\r\n                ...initState(),\r\n                calcKey: calcKey + 1,\r\n            });\r\n        }\r\n        innerHtmlPrevRef.current = innerHtml;\r\n    }, [calcKey, initState, innerHtml, onStart]);\r\n    // Check overflow and resize font\r\n    useIsoLayoutEffect(() => {\r\n        // Don't start calculating font size until the `resizeKey` is incremented\r\n        // above in the `ResizeObserver` callback. This avoids an extra resize\r\n        // on initialization.\r\n        if (calcKey === 0) {\r\n            return;\r\n        }\r\n        const isWithinResolution = Math.abs(fontSize - fontSizePrev) <= resolution;\r\n        const isOverflow = !!ref.current &&\r\n            (ref.current.scrollHeight > ref.current.offsetHeight ||\r\n                ref.current.scrollWidth > ref.current.offsetWidth);\r\n        const isFailed = isOverflow && fontSize === fontSizePrev;\r\n        const isAsc = fontSize > fontSizePrev;\r\n        // Return if the font size has been adjusted \"enough\" (change within `resolution`)\r\n        // reduce font size by one increment if it's overflowing.\r\n        if (isWithinResolution) {\r\n            if (isFailed) {\r\n                isCalculatingRef.current = false;\r\n                if (logLevel <= LOG_LEVEL.info) {\r\n                    console.info(`[use-fit-text] reached \\`minFontSize = ${minFontSize}\\` without fitting text`);\r\n                }\r\n            }\r\n            else if (isOverflow) {\r\n                setState({\r\n                    fontSize: isAsc ? fontSizePrev : fontSizeMin,\r\n                    fontSizeMax,\r\n                    fontSizeMin,\r\n                    fontSizePrev,\r\n                    calcKey,\r\n                });\r\n            }\r\n            else {\r\n                isCalculatingRef.current = false;\r\n                onFinish && onFinish(fontSize);\r\n            }\r\n            return;\r\n        }\r\n        // Binary search to adjust font size\r\n        let delta;\r\n        let newMax = fontSizeMax;\r\n        let newMin = fontSizeMin;\r\n        if (isOverflow) {\r\n            delta = isAsc ? fontSizePrev - fontSize : fontSizeMin - fontSize;\r\n            newMax = Math.min(fontSizeMax, fontSize);\r\n        }\r\n        else {\r\n            delta = isAsc ? fontSizeMax - fontSize : fontSizePrev - fontSize;\r\n            newMin = Math.max(fontSizeMin, fontSize);\r\n        }\r\n        setState({\r\n            calcKey,\r\n            fontSize: fontSize + delta / 2,\r\n            fontSizeMax: newMax,\r\n            fontSizeMin: newMin,\r\n            fontSizePrev: fontSize,\r\n        });\r\n    }, [\r\n        calcKey,\r\n        fontSize,\r\n        fontSizeMax,\r\n        fontSizeMin,\r\n        fontSizePrev,\r\n        onFinish,\r\n        ref,\r\n        resolution,\r\n    ]);\r\n    return { fontSize, ref };\r\n};\r\nexport default useFitText;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/resize-observer-polyfill/src/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/hooks/useFitText.d.ts","writeByteOrderMark":false,"text":"/// <reference types=\"react\" />\r\nexport type TLogLevel = 'debug' | 'info' | 'warn' | 'error' | 'none';\r\nexport type TOptions = {\r\n    logLevel?: TLogLevel;\r\n    maxFontSize?: number;\r\n    minFontSize?: number;\r\n    onFinish?: (fontSize: number) => void;\r\n    onStart?: () => void;\r\n    resolution?: number;\r\n};\r\ndeclare const useFitText: ({ logLevel: logLevelOption, maxFontSize, minFontSize, onFinish, onStart, resolution, }?: TOptions) => {\r\n    fontSize: number;\r\n    ref: import(\"react\").RefObject<HTMLDivElement>;\r\n};\r\nexport default useFitText;\r\n"}}
