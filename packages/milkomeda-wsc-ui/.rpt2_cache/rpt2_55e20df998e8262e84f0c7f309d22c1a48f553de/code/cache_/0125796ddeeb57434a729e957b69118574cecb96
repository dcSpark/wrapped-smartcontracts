{"code":"import { jsx as _jsx, Fragment as _Fragment, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport QRCodeUtil from \"qrcode\";\r\nimport { useMemo } from \"react\";\r\nconst generateMatrix = (value, errorCorrectionLevel) => {\r\n    const arr = Array.prototype.slice.call(QRCodeUtil.create(value, { errorCorrectionLevel }).modules.data, 0);\r\n    const sqrt = Math.sqrt(arr.length);\r\n    return arr.reduce((rows, key, index) => (index % sqrt === 0 ? rows.push([key]) : rows[rows.length - 1].push(key)) && rows, []);\r\n};\r\nexport function QRCode({ ecl = \"M\", size: sizeProp = 200, uri, clearArea = false, image, imageBackground = \"transparent\", }) {\r\n    const logoSize = clearArea ? 76 : 0;\r\n    const size = sizeProp - 10 * 2;\r\n    const dots = useMemo(() => {\r\n        const dots = [];\r\n        const matrix = generateMatrix(uri, ecl);\r\n        const cellSize = size / matrix.length;\r\n        const qrList = [\r\n            { x: 0, y: 0 },\r\n            { x: 1, y: 0 },\r\n            { x: 0, y: 1 },\r\n        ];\r\n        qrList.forEach(({ x, y }) => {\r\n            const x1 = (matrix.length - 7) * cellSize * x;\r\n            const y1 = (matrix.length - 7) * cellSize * y;\r\n            for (let i = 0; i < 3; i++) {\r\n                dots.push(_jsx(\"rect\", { fill: i % 2 !== 0\r\n                        ? \"var(--ck-qr-background, var(--ck-body-background))\"\r\n                        : \"var(--ck-qr-dot-color)\", rx: (i - 2) * -5 + (i === 0 ? 2 : 3), ry: (i - 2) * -5 + (i === 0 ? 2 : 3), width: cellSize * (7 - i * 2), height: cellSize * (7 - i * 2), x: x1 + cellSize * i, y: y1 + cellSize * i }, `${i}-${x}-${y}`));\r\n            }\r\n        });\r\n        if (image) {\r\n            const x1 = (matrix.length - 7) * cellSize * 1;\r\n            const y1 = (matrix.length - 7) * cellSize * 1;\r\n            dots.push(_jsxs(_Fragment, { children: [_jsx(\"rect\", { fill: imageBackground, rx: (0 - 2) * -5 + 2, ry: (0 - 2) * -5 + 2, width: cellSize * (7 - 0 * 2), height: cellSize * (7 - 0 * 2), x: x1 + cellSize * 0, y: y1 + cellSize * 0 }), _jsx(\"foreignObject\", { width: cellSize * (7 - 0 * 2), height: cellSize * (7 - 0 * 2), x: x1 + cellSize * 0, y: y1 + cellSize * 0, children: _jsx(\"div\", { style: { borderRadius: (0 - 2) * -5 + 2, overflow: \"hidden\" }, children: image }) })] }));\r\n        }\r\n        const clearArenaSize = Math.floor((logoSize + 25) / cellSize);\r\n        const matrixMiddleStart = matrix.length / 2 - clearArenaSize / 2;\r\n        const matrixMiddleEnd = matrix.length / 2 + clearArenaSize / 2 - 1;\r\n        matrix.forEach((row, i) => {\r\n            row.forEach((_, j) => {\r\n                if (matrix[i][j]) {\r\n                    // Do not render dots under position squares\r\n                    if (!((i < 7 && j < 7) ||\r\n                        (i > matrix.length - 8 && j < 7) ||\r\n                        (i < 7 && j > matrix.length - 8))) {\r\n                        //if (image && i > matrix.length - 9 && j > matrix.length - 9) return;\r\n                        if (image ||\r\n                            !(i > matrixMiddleStart &&\r\n                                i < matrixMiddleEnd &&\r\n                                j > matrixMiddleStart &&\r\n                                j < matrixMiddleEnd)) {\r\n                            dots.push(_jsx(\"circle\", { cx: i * cellSize + cellSize / 2, cy: j * cellSize + cellSize / 2, fill: \"var(--ck-qr-dot-color)\", r: cellSize / 3 }, `circle-${i}-${j}`));\r\n                        }\r\n                    }\r\n                }\r\n            });\r\n        });\r\n        return dots;\r\n    }, [ecl, size, uri]);\r\n    return (_jsxs(\"svg\", { height: size, width: size, viewBox: `0 0 ${size} ${size}`, style: {\r\n            width: size,\r\n            height: size,\r\n        }, children: [_jsx(\"rect\", { fill: \"transparent\", height: size, width: size }), dots] }));\r\n}\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/qrcode/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/CustomQRCode/QRCode.d.ts","writeByteOrderMark":false,"text":"import QRCodeUtil from \"qrcode\";\r\nimport React from \"react\";\r\ntype Props = {\r\n    ecl?: QRCodeUtil.QRCodeErrorCorrectionLevel;\r\n    size?: number;\r\n    uri: string;\r\n    clearArea?: boolean;\r\n    image?: React.ReactNode;\r\n    imageBackground?: string;\r\n};\r\nexport declare function QRCode({ ecl, size: sizeProp, uri, clearArea, image, imageBackground, }: Props): import(\"react/jsx-runtime\").JSX.Element;\r\nexport {};\r\n"}}
