{"code":"import { useAccount } from \"wagmi\";\r\nimport { routes, useContext } from \"../components/ConnectWSC\";\r\nimport { useConnectCallback } from \"./useConnectCallback\";\r\nconst safeRoutes = {\r\n    disconnected: [routes.CONNECTORS, routes.ONBOARDING, routes.MOBILECONNECTORS, routes.ONBOARDING],\r\n    connected: [routes.PROFILE],\r\n};\r\nconst allRoutes = [...safeRoutes.connected, ...safeRoutes.disconnected];\r\nexport const useModal = ({ onConnect, onDisconnect } = {}) => {\r\n    const context = useContext();\r\n    useConnectCallback({\r\n        onConnect,\r\n        onDisconnect,\r\n    });\r\n    const { isConnected } = useAccount();\r\n    const close = () => {\r\n        context.setOpen(false);\r\n    };\r\n    const open = () => {\r\n        context.setOpen(true);\r\n    };\r\n    const gotoAndOpen = (route) => {\r\n        let validRoute = route;\r\n        if (!allRoutes.includes(route)) {\r\n            validRoute = isConnected ? routes.PROFILE : routes.CONNECTORS;\r\n            context.log(`Route ${route} is not a valid route, navigating to ${validRoute} instead.`);\r\n        }\r\n        else {\r\n            if (isConnected) {\r\n                if (!safeRoutes.connected.includes(route)) {\r\n                    validRoute = routes.PROFILE;\r\n                    context.log(`Route ${route} is not a valid route when connected, navigating to ${validRoute} instead.`);\r\n                }\r\n            }\r\n            else {\r\n                if (!safeRoutes.disconnected.includes(route)) {\r\n                    validRoute = routes.CONNECTORS;\r\n                    context.log(`Route ${route} is not a valid route when disconnected, navigating to ${validRoute} instead.`);\r\n                }\r\n            }\r\n        }\r\n        context.setRoute(validRoute);\r\n        open();\r\n    };\r\n    return {\r\n        open: context.open,\r\n        setOpen: (show) => {\r\n            if (show) {\r\n                gotoAndOpen(isConnected ? routes.PROFILE : routes.CONNECTORS);\r\n            }\r\n            else {\r\n                close();\r\n            }\r\n        },\r\n        // Disconnected Routes\r\n        openOnboarding: () => gotoAndOpen(routes.ONBOARDING),\r\n        // Connected Routes\r\n        openProfile: () => gotoAndOpen(routes.PROFILE),\r\n    };\r\n};\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useConnectCallback.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/hooks/useModal.d.ts","writeByteOrderMark":false,"text":"import { useConnectCallbackProps } from \"./useConnectCallback\";\r\ntype UseModalProps = NonNullable<unknown> & useConnectCallbackProps;\r\nexport declare const useModal: ({ onConnect, onDisconnect }?: UseModalProps) => {\r\n    open: boolean;\r\n    setOpen: (show: boolean) => void;\r\n    openOnboarding: () => void;\r\n    openProfile: () => void;\r\n};\r\nexport {};\r\n"}}
