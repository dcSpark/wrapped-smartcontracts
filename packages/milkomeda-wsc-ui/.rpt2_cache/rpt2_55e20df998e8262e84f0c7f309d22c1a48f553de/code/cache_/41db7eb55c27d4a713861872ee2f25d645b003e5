{"code":"var _CardanoWSCConnector_provider, _CardanoWSCConnector_sdk, _CardanoWSCConnector_previousEVMProvider, _CardanoWSCConnector_previousCardanoProvider;\r\nimport { __classPrivateFieldGet, __classPrivateFieldSet } from \"tslib\";\r\nimport { WSCLib, MilkomedaNetworkName } from \"milkomeda-wsc\";\r\nimport { Connector, ConnectorNotFoundError } from \"wagmi\";\r\nimport { normalizeChainId } from \"@wagmi/core\";\r\n/**\r\n * Connector for [Cardano WSC]\r\n */\r\nexport class CardanoWSCConnector extends Connector {\r\n    constructor({ chains, options: options_, }) {\r\n        var _a;\r\n        const options = {\r\n            id: options_.name + \"-wsc\",\r\n            ...options_,\r\n        };\r\n        super({ chains, options });\r\n        this.ready = true;\r\n        _CardanoWSCConnector_provider.set(this, void 0);\r\n        _CardanoWSCConnector_sdk.set(this, void 0);\r\n        _CardanoWSCConnector_previousEVMProvider.set(this, void 0);\r\n        _CardanoWSCConnector_previousCardanoProvider.set(this, void 0);\r\n        this.onAccountsChanged = (accounts) => {\r\n            if (accounts.length === 0)\r\n                this.emit(\"disconnect\");\r\n            else\r\n                this.emit(\"change\", {\r\n                    account: \"0x\",\r\n                });\r\n        };\r\n        this.onChainChanged = (chainId) => {\r\n            const id = normalizeChainId(chainId);\r\n            const unsupported = this.isChainUnsupported(id);\r\n            this.emit(\"change\", { chain: { id, unsupported } });\r\n        };\r\n        this.id = options.id;\r\n        this.name = options.name;\r\n        if (typeof window === \"undefined\")\r\n            return;\r\n        __classPrivateFieldSet(this, _CardanoWSCConnector_previousEVMProvider, window === null || window === void 0 ? void 0 : window.ethereum, \"f\");\r\n        __classPrivateFieldSet(this, _CardanoWSCConnector_previousCardanoProvider, window === null || window === void 0 ? void 0 : window.cardano, \"f\");\r\n        const network = (_a = options_.network) !== null && _a !== void 0 ? _a : MilkomedaNetworkName.C1Devnet;\r\n        __classPrivateFieldSet(this, _CardanoWSCConnector_sdk, new WSCLib(network, options_.name, {\r\n            oracleUrl: options_.oracleUrl,\r\n            blockfrostKey: options_.blockfrostKey,\r\n            jsonRpcProviderUrl: options_.jsonRpcProviderUrl,\r\n        }), \"f\");\r\n    }\r\n    async connect() {\r\n        const provider = await this.getProvider();\r\n        if (!provider)\r\n            throw new ConnectorNotFoundError();\r\n        if (provider.on) {\r\n            provider.on(\"accountsChanged\", this.onAccountsChanged);\r\n            provider.on(\"chainChanged\", this.onChainChanged);\r\n            provider.on(\"disconnect\", this.onDisconnect);\r\n        }\r\n        this.emit(\"message\", { type: \"connecting\" });\r\n        const account = await this.getAccount();\r\n        const id = await this.getChainId();\r\n        return {\r\n            account,\r\n            chain: { id, unsupported: this.isChainUnsupported(id) },\r\n        };\r\n    }\r\n    async disconnect() {\r\n        const provider = await this.getProvider();\r\n        // switch back to previous provider\r\n        window.ethereum = __classPrivateFieldGet(this, _CardanoWSCConnector_previousEVMProvider, \"f\");\r\n        window.cardano = __classPrivateFieldGet(this, _CardanoWSCConnector_previousCardanoProvider, \"f\");\r\n        if (!(provider === null || provider === void 0 ? void 0 : provider.removeListener))\r\n            return;\r\n        provider.removeListener(\"accountsChanged\", this.onAccountsChanged);\r\n        provider.removeListener(\"chainChanged\", this.onChainChanged);\r\n        provider.removeListener(\"disconnect\", this.onDisconnect);\r\n    }\r\n    async getAccount() {\r\n        var _a;\r\n        const provider = await this.getProvider();\r\n        if (!provider)\r\n            throw new ConnectorNotFoundError();\r\n        const account = await ((_a = __classPrivateFieldGet(this, _CardanoWSCConnector_provider, \"f\")) === null || _a === void 0 ? void 0 : _a.eth_getAccount());\r\n        return account;\r\n    }\r\n    async getChainId() {\r\n        const provider = await this.getProvider();\r\n        if (!provider)\r\n            throw new ConnectorNotFoundError();\r\n        return normalizeChainId(200101);\r\n    }\r\n    async getProvider() {\r\n        var _a;\r\n        if (!__classPrivateFieldGet(this, _CardanoWSCConnector_provider, \"f\")) {\r\n            const wsc = await ((_a = __classPrivateFieldGet(this, _CardanoWSCConnector_sdk, \"f\")) === null || _a === void 0 ? void 0 : _a.inject());\r\n            if (!wsc)\r\n                throw new Error(\"Could not load WSC information\");\r\n            __classPrivateFieldSet(this, _CardanoWSCConnector_provider, wsc, \"f\");\r\n        }\r\n        return __classPrivateFieldGet(this, _CardanoWSCConnector_provider, \"f\");\r\n    }\r\n    async getSigner() {\r\n        const provider = await this.getProvider();\r\n        return (await provider.getEthersProvider()).getSigner();\r\n    }\r\n    async isAuthorized() {\r\n        try {\r\n            const account = await this.getAccount();\r\n            return !!account;\r\n        }\r\n        catch {\r\n            return false;\r\n        }\r\n    }\r\n    onDisconnect() {\r\n        this.emit(\"disconnect\");\r\n    }\r\n}\r\n_CardanoWSCConnector_provider = new WeakMap(), _CardanoWSCConnector_sdk = new WeakMap(), _CardanoWSCConnector_previousEVMProvider = new WeakMap(), _CardanoWSCConnector_previousCardanoProvider = new WeakMap();\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@wagmi/chains/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/milkomeda-wsc/build/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@wagmi/core/dist/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/wsc-cardano-connector.d.ts","writeByteOrderMark":false,"text":"import type { Chain } from \"@wagmi/chains\";\r\nimport { WSCLib, MilkomedaNetworkName } from \"milkomeda-wsc\";\r\nimport { Connector } from \"wagmi\";\r\ntype CardanoWSCConnectorOptions = {\r\n    name: string;\r\n    network?: MilkomedaNetworkName;\r\n    oracleUrl?: string;\r\n    blockfrostKey: string;\r\n    jsonRpcProviderUrl?: string;\r\n};\r\n/**\r\n * Connector for [Cardano WSC]\r\n */\r\nexport declare class CardanoWSCConnector extends Connector<WSCLib, CardanoWSCConnectorOptions> {\r\n    #private;\r\n    readonly ready = true;\r\n    readonly id: any;\r\n    readonly name: any;\r\n    constructor({ chains, options: options_, }: {\r\n        chains: Chain[];\r\n        options: CardanoWSCConnectorOptions;\r\n    });\r\n    connect(): Promise<any>;\r\n    disconnect(): Promise<void>;\r\n    getAccount(): Promise<any>;\r\n    getChainId(): Promise<number>;\r\n    getProvider(): Promise<any>;\r\n    getSigner(): Promise<any>;\r\n    isAuthorized(): Promise<boolean>;\r\n    onAccountsChanged: (accounts: string[]) => void;\r\n    onChainChanged: (chainId: number | string) => void;\r\n    onDisconnect(): void;\r\n}\r\nexport {};\r\n"}}
