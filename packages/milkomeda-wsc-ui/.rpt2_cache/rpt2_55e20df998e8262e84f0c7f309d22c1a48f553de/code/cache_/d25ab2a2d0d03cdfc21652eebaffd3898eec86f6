{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useAccount, useNetwork } from \"wagmi\";\r\nimport { truncateEthAddress } from \"../../utils\";\r\nimport useIsMounted from \"../../hooks/useIsMounted\";\r\nimport { IconContainer, TextContainer, UnsupportedNetworkContainer } from \"./styles\";\r\nimport { routes, useContext } from \"../ConnectWSC\";\r\nimport { AnimatePresence, motion } from \"framer-motion\";\r\nimport { Balance } from \"../BalanceButton\";\r\nimport ThemedButton, { ThemeContainer } from \"../Common/ThemedButton\";\r\nimport { ResetContainer } from \"../../styles\";\r\nconst contentVariants = {\r\n    initial: {\r\n        zIndex: 2,\r\n        opacity: 0,\r\n        x: \"-100%\",\r\n    },\r\n    animate: {\r\n        opacity: 1,\r\n        x: 0.1,\r\n        transition: {\r\n            duration: 0.4,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n    exit: {\r\n        zIndex: 1,\r\n        opacity: 0,\r\n        x: \"-100%\",\r\n        pointerEvents: \"none\",\r\n        position: \"absolute\",\r\n        transition: {\r\n            duration: 0.4,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n};\r\nconst addressVariants = {\r\n    initial: {\r\n        zIndex: 2,\r\n        opacity: 0,\r\n        x: \"100%\",\r\n    },\r\n    animate: {\r\n        x: 0.2,\r\n        opacity: 1,\r\n        transition: {\r\n            duration: 0.4,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n    exit: {\r\n        zIndex: 1,\r\n        x: \"100%\",\r\n        opacity: 0,\r\n        pointerEvents: \"none\",\r\n        position: \"absolute\",\r\n        transition: {\r\n            duration: 0.4,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n};\r\nconst textVariants = {\r\n    initial: {\r\n        opacity: 0,\r\n    },\r\n    animate: {\r\n        opacity: 1,\r\n        transition: {\r\n            duration: 0.3,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n    exit: {\r\n        position: \"absolute\",\r\n        opacity: 0,\r\n        transition: {\r\n            duration: 0.3,\r\n            ease: [0.25, 1, 0.5, 1],\r\n        },\r\n    },\r\n};\r\nfunction ConnectWSCButtonInner({ label, showAvatar, separator, }) {\r\n    const context = useContext();\r\n    const { address } = useAccount();\r\n    const { chain } = useNetwork();\r\n    const defaultLabel = \"Connect WSC\";\r\n    return (_jsx(AnimatePresence, { initial: false, children: address ? (_jsxs(TextContainer, { initial: \"initial\", animate: \"animate\", exit: \"exit\", variants: addressVariants, style: {\r\n                height: 40,\r\n                //padding: !showAvatar ? '0 5px' : undefined,\r\n            }, children: [showAvatar && (_jsx(IconContainer, { children: _jsx(AnimatePresence, { initial: false, children: (chain === null || chain === void 0 ? void 0 : chain.unsupported) && (_jsx(UnsupportedNetworkContainer, { initial: { opacity: 0 }, animate: { opacity: 1 }, exit: { opacity: 0 }, children: _jsx(\"svg\", { width: \"14\", height: \"14\", viewBox: \"0 0 14 14\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: _jsx(\"path\", { d: \"M1.68831 13.5H12.0764C13.1026 13.5 13.7647 12.7197 13.7647 11.763C13.7647 11.4781 13.6985 11.1863 13.5462 10.9149L8.34225 1.37526C8.02445 0.791754 7.45505 0.5 6.88566 0.5C6.31627 0.5 5.73364 0.791754 5.42246 1.37526L0.225108 10.9217C0.0728291 11.1863 0 11.4781 0 11.763C0 12.7197 0.662083 13.5 1.68831 13.5ZM6.88566 8.8048C6.49503 8.8048 6.27655 8.5809 6.26331 8.1738L6.16399 5.0595C6.15075 4.64562 6.44869 4.34708 6.87904 4.34708C7.30278 4.34708 7.61396 4.6524 7.60071 5.06628L7.5014 8.16701C7.48154 8.5809 7.26305 8.8048 6.88566 8.8048ZM6.88566 11.3492C6.44207 11.3492 6.07792 11.0303 6.07792 10.5757C6.07792 10.1211 6.44207 9.80219 6.88566 9.80219C7.32926 9.80219 7.69341 10.1143 7.69341 10.5757C7.69341 11.0371 7.32264 11.3492 6.88566 11.3492Z\", fill: \"currentColor\" }) }) })) }) })), _jsx(\"div\", { style: {\r\n                        position: \"relative\",\r\n                        paddingRight: showAvatar ? 1 : 0,\r\n                    }, children: _jsx(AnimatePresence, { initial: false, children: _jsxs(TextContainer, { initial: \"initial\", animate: \"animate\", exit: \"exit\", variants: textVariants, style: {\r\n                                position: \"relative\",\r\n                            }, children: [truncateEthAddress(address, separator), \" \"] }, \"ckTruncatedAddress\") }) })] }, \"connectedText\")) : (_jsx(TextContainer, { initial: \"initial\", animate: \"animate\", exit: \"exit\", variants: contentVariants, style: {\r\n                height: 40,\r\n                //padding: '0 5px',\r\n            }, children: label ? label : defaultLabel }, \"connectWalletText\")) }));\r\n}\r\nexport function ConnectWSCButton({ onClick }) {\r\n    const isMounted = useIsMounted();\r\n    const context = useContext();\r\n    const { isConnected, address } = useAccount();\r\n    const { chain } = useNetwork();\r\n    function show() {\r\n        context.setOpen(true);\r\n        context.setRoute(isConnected ? routes.PROFILE : routes.CONNECTORS);\r\n    }\r\n    const separator = [\"web95\", \"rounded\", \"minimal\"].includes(\"\") ? \"....\" : undefined;\r\n    if (!isMounted)\r\n        return null;\r\n    const shouldShowBalance = !(chain === null || chain === void 0 ? void 0 : chain.unsupported);\r\n    const willShowBalance = address && shouldShowBalance;\r\n    return (_jsx(ResetContainer, { children: _jsxs(ThemeContainer, { onClick: () => {\r\n                if (onClick) {\r\n                    onClick(show);\r\n                }\r\n                else {\r\n                    show();\r\n                }\r\n            }, children: [shouldShowBalance && (_jsx(AnimatePresence, { initial: false, children: willShowBalance && (_jsx(motion.div, { initial: {\r\n                            opacity: 0,\r\n                            x: \"100%\",\r\n                            width: 0,\r\n                            marginRight: 0,\r\n                        }, animate: {\r\n                            opacity: 1,\r\n                            x: 0,\r\n                            width: \"auto\",\r\n                            marginRight: -24,\r\n                            transition: {\r\n                                duration: 0.4,\r\n                                ease: [0.25, 1, 0.5, 1],\r\n                            },\r\n                        }, exit: {\r\n                            opacity: 0,\r\n                            x: \"100%\",\r\n                            width: 0,\r\n                            marginRight: 0,\r\n                            transition: {\r\n                                duration: 0.4,\r\n                                ease: [0.25, 1, 0.5, 1],\r\n                            },\r\n                        }, children: _jsx(ThemedButton, { variant: \"secondary\", style: { overflow: \"hidden\" }, children: _jsx(motion.div, { style: { paddingRight: 24 }, children: _jsx(Balance, { hideSymbol: true }) }) }) }, \"balance\")) })), _jsx(ThemedButton, { style: shouldShowBalance && address\r\n                        ? {\r\n                            /** Special fix for the retro theme... not happy about this one */\r\n                            boxShadow: \"var(--ck-connectbutton-balance-connectbutton-box-shadow)\",\r\n                            borderRadius: \"var(--ck-connectbutton-balance-connectbutton-border-radius)\",\r\n                            overflow: \"hidden\",\r\n                        }\r\n                        : {\r\n                            overflow: \"hidden\",\r\n                        }, children: _jsx(ConnectWSCButtonInner, { separator: separator }) })] }) }));\r\n}\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useIsMounted.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectButton/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useModal.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/framer-motion/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/BalanceButton/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/ThemedButton/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/styles/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/assets/icons.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/ConnectButton/index.d.ts","writeByteOrderMark":false,"text":"type ConnectKitButtonProps = {\r\n    onClick?: (open: () => void) => void;\r\n};\r\nexport declare function ConnectWSCButton({ onClick }: ConnectKitButtonProps): import(\"react/jsx-runtime\").JSX.Element | null;\r\nexport {};\r\n"}}
