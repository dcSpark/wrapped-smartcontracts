{"code":"import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\r\nimport { useContext, routes } from \"../../ConnectWSC\";\r\nimport supportedConnectors from \"../../../constants/supportedConnectors\";\r\nimport { useConnect } from \"../../../hooks/useConnect\";\r\nimport { PageContent, ModalH1, ModalBody, ModalContent } from \"../../Common/Modal/styles\";\r\nimport { ConnectorsContainer, ConnectorButton, ConnectorLabel, ConnectorIcon, MobileConnectorsContainer, MobileConnectorButton, MobileConnectorLabel, InfoBox, InfoBoxButtons, MobileConnectorIcon, } from \"./styles\";\r\nimport { isMobile } from \"../../../utils\";\r\nimport Button from \"../../Common/Button\";\r\nconst Wallets = () => {\r\n    const context = useContext();\r\n    const mobile = isMobile();\r\n    const { connectAsync, connectors } = useConnect();\r\n    const openDefaultConnect = async (connector) => {\r\n        try {\r\n            await connectAsync({ connector: connector });\r\n        }\r\n        catch (err) {\r\n            context.displayError(\"Async connect error. See console for more details.\", err);\r\n        }\r\n    };\r\n    return (_jsx(PageContent, { style: { width: 312 }, children: mobile ? (_jsxs(_Fragment, { children: [_jsx(MobileConnectorsContainer, { children: connectors.map((connector) => {\r\n                        var _a, _b, _c, _d, _e;\r\n                        const info = supportedConnectors.filter((c) => c.id === connector.id)[0];\r\n                        if (!info)\r\n                            return null;\r\n                        const logos = info.logos;\r\n                        const name = (_b = (_a = info.shortName) !== null && _a !== void 0 ? _a : info.name) !== null && _b !== void 0 ? _b : connector.name;\r\n                        return (_jsxs(MobileConnectorButton, { disabled: !connector.ready, onClick: () => {\r\n                                context.setRoute(routes.CONNECT);\r\n                                context.setConnector(connector.id);\r\n                                openDefaultConnect(connector);\r\n                            }, children: [_jsx(MobileConnectorIcon, { children: (_e = (_d = (_c = logos.mobile) !== null && _c !== void 0 ? _c : logos.appIcon) !== null && _d !== void 0 ? _d : logos.connectorButton) !== null && _e !== void 0 ? _e : logos.default }), _jsx(MobileConnectorLabel, { children: name })] }, `m-${connector.id}`));\r\n                    }) }), _jsxs(InfoBox, { children: [_jsxs(ModalContent, { style: { padding: 0, textAlign: \"left\" }, children: [_jsx(ModalH1, { \"$small\": true, children: \"connectorsScreen_h1\" }), _jsx(ModalBody, { children: \"connectorsScreen_p\" })] }), _jsx(InfoBoxButtons, { children: _jsx(Button, { variant: \"tertiary\", onClick: () => context.setRoute(routes.ONBOARDING), children: \"getWallet\" }) })] })] })) : (_jsx(_Fragment, { children: _jsx(ConnectorsContainer, { children: connectors.map((connector) => {\r\n                    var _a, _b;\r\n                    const info = supportedConnectors.filter((c) => c.id === connector.id)[0];\r\n                    if (!info)\r\n                        return null;\r\n                    const logos = info.logos;\r\n                    const name = (_a = info.name) !== null && _a !== void 0 ? _a : connector.name;\r\n                    let logo = (_b = logos.connectorButton) !== null && _b !== void 0 ? _b : logos.default;\r\n                    if (info.extensionIsInstalled && logos.appIcon) {\r\n                        if (info.extensionIsInstalled()) {\r\n                            logo = logos.appIcon;\r\n                        }\r\n                    }\r\n                    return (_jsxs(ConnectorButton, { disabled: context.route !== routes.CONNECTORS, onClick: () => {\r\n                            context.setRoute(routes.CONNECT);\r\n                            context.setConnector(connector.id);\r\n                        }, children: [_jsx(ConnectorIcon, { children: logo }), _jsx(ConnectorLabel, { children: name })] }, connector.id));\r\n                }) }) })) }));\r\n};\r\nexport default Wallets;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/constants/supportedConnectors.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/hooks/useConnect.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Modal/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/Connectors/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Pages/Connectors/index.d.ts","writeByteOrderMark":false,"text":"import React from \"react\";\r\ndeclare const Wallets: React.FC;\r\nexport default Wallets;\r\n"}}
