{"code":"import * as React from \"react\";\r\nexport function useStepper({ initialStep }) {\r\n    const [activeStep, setActiveStep] = React.useState(initialStep);\r\n    const nextStep = () => {\r\n        setActiveStep((prev) => prev + 1);\r\n    };\r\n    const prevStep = () => {\r\n        setActiveStep((prev) => prev - 1);\r\n    };\r\n    const resetSteps = () => {\r\n        setActiveStep(initialStep);\r\n    };\r\n    const setStep = (step) => {\r\n        setActiveStep(step);\r\n    };\r\n    const isDisabledStep = activeStep === 0;\r\n    return {\r\n        nextStep,\r\n        prevStep,\r\n        resetSteps,\r\n        setStep,\r\n        activeStep,\r\n        isDisabledStep,\r\n    };\r\n}\r\n/**\r\n * Older versions of Safari (shipped withCatalina and before) do not support addEventListener on matchMedia\r\n * https://stackoverflow.com/questions/56466261/matchmedia-addlistener-marked-as-deprecated-addeventlistener-equivalent\r\n * */\r\nfunction attachMediaListener(query, callback) {\r\n    try {\r\n        query.addEventListener(\"change\", callback);\r\n        return () => query.removeEventListener(\"change\", callback);\r\n    }\r\n    catch (e) {\r\n        query.addListener(callback);\r\n        return () => query.removeListener(callback);\r\n    }\r\n}\r\nfunction getInitialValue(query, initialValue) {\r\n    if (typeof initialValue === \"boolean\") {\r\n        return initialValue;\r\n    }\r\n    if (typeof window !== \"undefined\" && \"matchMedia\" in window) {\r\n        return window.matchMedia(query).matches;\r\n    }\r\n    return false;\r\n}\r\nexport function useMediaQuery(query, initialValue, { getInitialValueInEffect } = {\r\n    getInitialValueInEffect: true,\r\n}) {\r\n    const [matches, setMatches] = React.useState(getInitialValueInEffect ? false : getInitialValue(query, initialValue));\r\n    const queryRef = React.useRef();\r\n    React.useEffect(() => {\r\n        if (\"matchMedia\" in window) {\r\n            queryRef.current = window.matchMedia(query);\r\n            setMatches(queryRef.current.matches);\r\n            return attachMediaListener(queryRef.current, (event) => setMatches(event.matches));\r\n        }\r\n        return undefined;\r\n    }, [query]);\r\n    return matches;\r\n}\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Stepper/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/Stepper/use-stepper.d.ts","writeByteOrderMark":false,"text":"type UseStepper = {\r\n    initialStep: number;\r\n};\r\ntype UseStepperReturn = {\r\n    nextStep: () => void;\r\n    prevStep: () => void;\r\n    resetSteps: () => void;\r\n    setStep: (step: number) => void;\r\n    activeStep: number;\r\n    isDisabledStep: boolean;\r\n};\r\nexport declare function useStepper({ initialStep }: UseStepper): UseStepperReturn;\r\ninterface UseMediaQueryOptions {\r\n    getInitialValueInEffect: boolean;\r\n}\r\nexport declare function useMediaQuery(query: string, initialValue?: boolean, { getInitialValueInEffect }?: UseMediaQueryOptions): boolean;\r\nexport {};\r\n"}}
