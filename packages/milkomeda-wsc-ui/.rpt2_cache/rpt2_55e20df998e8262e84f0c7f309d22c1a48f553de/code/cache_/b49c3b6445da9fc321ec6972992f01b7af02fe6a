{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { useState } from 'react';\r\nimport styled from '../../../styles/styled';\r\nimport { css } from 'styled-components';\r\nimport CopyToClipboardIcon from './CopyToClipboardIcon';\r\nimport Button from '../Button';\r\nconst Container = styled.div.withConfig({ displayName: \"Container\", componentId: \"-wdoxk5\" }) `\n  --color: var(--ck-copytoclipboard-stroke);\n  --bg: var(--ck-body-background);\n  transition: all 220ms cubic-bezier(0.175, 0.885, 0.32, 1.1);\n\n  cursor: pointer;\n  display: inline-flex;\n  align-items: center;\n  justify-content: center;\n\n  ${(props) => props.$disabled\r\n    ? css `\n          cursor: not-allowed;\n          opacity: 0.4;\n        `\r\n    : css `\n          &:hover {\n            --color: var(--ck-body-color-muted);\n          }\n        `}\n`;\r\nconst OffsetContainer = styled.div.withConfig({ displayName: \"OffsetContainer\", componentId: \"-4a1ndg\" }) `\n  display: block;\n  position: relative;\n  transition: inherit;\n  svg {\n    position: absolute;\n    left: 100%;\n    display: block;\n    top: -1px;\n    margin: 0;\n    margin-left: 4px;\n  }\n`;\r\nconst CopyToClipboard = ({ string, children, variant }) => {\r\n    const [clipboard, setClipboard] = useState(false);\r\n    let timeout;\r\n    const onCopy = () => {\r\n        if (!string)\r\n            return;\r\n        const str = string.trim();\r\n        if (navigator.clipboard) {\r\n            navigator.clipboard.writeText(str);\r\n        }\r\n        else {\r\n            // Fallback copy to clipboard if necessary\r\n            /*\r\n            const el = document.createElement('textarea');\r\n            el.value = str;\r\n            document.body.appendChild(el);\r\n            el.select();\r\n            document.execCommand('copy');\r\n            document.body.removeChild(el);\r\n            */\r\n        }\r\n        setClipboard(true);\r\n        clearTimeout(timeout);\r\n        timeout = setTimeout(() => setClipboard(false), 1000);\r\n    };\r\n    if (variant === 'button')\r\n        return (_jsx(Button, { disabled: !string, onClick: onCopy, icon: _jsx(CopyToClipboardIcon, { copied: clipboard }), children: children }));\r\n    return (_jsx(Container, { onClick: onCopy, \"$disabled\": !string, children: _jsxs(OffsetContainer, { children: [children, _jsx(CopyToClipboardIcon, { copied: clipboard, small: true })] }) }));\r\n};\r\nexport default CopyToClipboard;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/styles/styled/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/styled-components/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/CopyToClipboard/CopyToClipboardIcon.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/CopyToClipboard/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\ndeclare const CopyToClipboard: React.FC<{\r\n    string?: string;\r\n    children?: React.ReactNode;\r\n    variant?: 'button';\r\n}>;\r\nexport default CopyToClipboard;\r\n"}}
