{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport { ButtonContainer, InnerContainer, IconContainer, Arrow, ArrowLine, ArrowChevron, DownloadArrow, DownloadArrowInner, ButtonContainerInner, SpinnerContainer, } from './styles';\r\nimport { AnimatePresence } from 'framer-motion';\r\nimport { flattenChildren } from '../../../utils';\r\nimport FitText from '../FitText';\r\nimport { Spinner } from '../Spinner';\r\nconst transition = {\r\n    duration: 0.4,\r\n    ease: [0.175, 0.885, 0.32, 0.98],\r\n};\r\nconst Button = ({ children, variant = 'secondary', // unique aspect to how we're handling buttons\r\ndisabled, icon, iconPosition = 'left', roundedIcon, waiting, arrow, download, href, style, onClick, }) => {\r\n    const key = typeof children === 'string'\r\n        ? children\r\n        : flattenChildren(children).join(''); // Need to generate a string for the key so we can automatically animate between content\r\n    const hrefUrl = typeof href === 'string' ? href : flattenChildren(href).join(''); // Need to have a flat string for the href\r\n    return (_jsx(ButtonContainer, { as: href ? 'a' : undefined, onClick: (event) => {\r\n            if (!disabled && onClick)\r\n                onClick(event);\r\n        }, href: hrefUrl, target: href && '_blank', rel: href && 'noopener noreferrer', disabled: disabled, \"$variant\": variant, style: style, children: _jsxs(AnimatePresence, { initial: false, children: [_jsxs(ButtonContainerInner, { initial: { opacity: 0, y: -10 }, animate: {\r\n                        opacity: 1,\r\n                        y: -1,\r\n                    }, exit: {\r\n                        position: 'absolute',\r\n                        opacity: 0,\r\n                        y: 10,\r\n                        transition: {\r\n                            ...transition,\r\n                        },\r\n                    }, transition: {\r\n                        ...transition,\r\n                        delay: 0.2,\r\n                    }, children: [icon && iconPosition === 'left' && (_jsx(IconContainer, { \"$rounded\": roundedIcon, children: icon })), download && (_jsx(DownloadArrow, { children: _jsx(DownloadArrowInner, { children: _jsxs(Arrow, { width: \"13\", height: \"12\", viewBox: \"0 0 13 12\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: [_jsx(ArrowLine, { stroke: \"currentColor\", x1: \"1\", y1: \"6\", x2: \"12\", y2: \"6\", strokeWidth: \"var(--stroke-width)\", strokeLinecap: \"round\" }), _jsx(ArrowChevron, { stroke: \"currentColor\", d: \"M7.51431 1.5L11.757 5.74264M7.5 10.4858L11.7426 6.24314\", strokeWidth: \"var(--stroke-width)\", strokeLinecap: \"round\" })] }) }) })), _jsx(InnerContainer, { style: { paddingLeft: arrow ? 6 : 0 }, children: _jsx(FitText, { children: children }) }), icon && iconPosition === 'right' && (_jsx(IconContainer, { \"$rounded\": roundedIcon, children: icon })), arrow && (_jsxs(Arrow, { width: \"13\", height: \"12\", viewBox: \"0 0 13 12\", fill: \"none\", xmlns: \"http://www.w3.org/2000/svg\", children: [_jsx(ArrowLine, { stroke: \"currentColor\", x1: \"1\", y1: \"6\", x2: \"12\", y2: \"6\", strokeWidth: \"2\", strokeLinecap: \"round\" }), _jsx(ArrowChevron, { stroke: \"currentColor\", d: \"M7.51431 1.5L11.757 5.74264M7.5 10.4858L11.7426 6.24314\", strokeWidth: \"2\", strokeLinecap: \"round\" })] }))] }, key), waiting && (_jsx(SpinnerContainer, { children: _jsx(Spinner, {}) }))] }) }));\r\n};\r\nexport default Button;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/types.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/framer-motion/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/index.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/FitText/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Spinner/index.tsx"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/Button/index.d.ts","writeByteOrderMark":false,"text":"import React from 'react';\r\nimport { ButtonProps } from './types';\r\ndeclare const Button: React.FC<ButtonProps>;\r\nexport default Button;\r\n"}}
