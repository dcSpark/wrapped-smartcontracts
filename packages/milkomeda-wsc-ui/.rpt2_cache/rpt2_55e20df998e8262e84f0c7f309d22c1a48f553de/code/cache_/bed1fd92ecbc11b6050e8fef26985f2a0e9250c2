{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport React from \"react\";\r\nimport { ErrorMessage, SpinnerWrapper, StepDescription, StepTitle, SuccessWrapper, } from \"./styles\";\r\nimport { erc20ABI, useSigner } from \"wagmi\";\r\nimport { useContext } from \"../ConnectWSC\";\r\nimport { ethers } from \"ethers\";\r\nimport Button from \"../Common/Button\";\r\nimport { CheckCircle2 } from \"lucide-react\";\r\nimport { Spinner } from \"../Common/Spinner\";\r\nimport { convertTokensToWei } from \"../../utils/convertWeiToTokens\";\r\nimport { DEFAULT_STEP_TIMEOUT } from \"./constants\";\r\nconst bridgeAddress = \"0x319f10d19e21188ecF58b9a146Ab0b2bfC894648\";\r\nconst TokenAllowanceStep = ({ nextStep }) => {\r\n    const { data: signer } = useSigner();\r\n    const { tokens } = useContext();\r\n    const [approvalStatus, setApprovalStatus] = React.useState(\"idle\");\r\n    const { contractAddress } = useContext();\r\n    const onTokenAllowance = async () => {\r\n        const selectedToken = tokens.find((t) => t.contractAddress === contractAddress);\r\n        if (!selectedToken)\r\n            return;\r\n        const convertAmountBN = convertTokensToWei({\r\n            value: selectedToken.balance,\r\n            token: selectedToken,\r\n        }).toFixed();\r\n        try {\r\n            setApprovalStatus(\"pending\");\r\n            const erc20Contract = new ethers.Contract(selectedToken.contractAddress, erc20ABI, signer);\r\n            const approvalTx = await erc20Contract.approve(bridgeAddress, convertAmountBN, {\r\n                gasLimit: 500000,\r\n            });\r\n            const approvalReceipt = await approvalTx.wait();\r\n            console.log(approvalReceipt, \"approvalReceipt\");\r\n            setApprovalStatus(\"success\");\r\n            setTimeout(() => {\r\n                nextStep();\r\n            }, DEFAULT_STEP_TIMEOUT);\r\n        }\r\n        catch (err) {\r\n            setApprovalStatus(\"error\");\r\n            console.error(err);\r\n        }\r\n    };\r\n    const isLoading = approvalStatus === \"pending\";\r\n    const isSuccess = approvalStatus === \"success\";\r\n    const isError = approvalStatus === \"error\";\r\n    return (_jsxs(\"div\", { children: [_jsx(StepTitle, { children: \"Token Allowance: Empowering Controlled Asset Transfers\" }), _jsx(StepDescription, { style: { marginBottom: 30 }, children: \"Allow the smart contract to spend the specified amount of tokens on your behalf, enabling the unwrapping process from the Sidechain to the L1 chain.\" }), isLoading && (_jsxs(SpinnerWrapper, { children: [_jsx(Spinner, {}), _jsx(\"span\", { children: \"Approving token allowance\" })] })), isError && _jsx(ErrorMessage, { role: \"alert\", children: \"Ups, something went wrong.\" }), isSuccess && (_jsxs(SuccessWrapper, { children: [_jsx(CheckCircle2, {}), _jsx(\"span\", { children: \"You've successfully approved the bridge to spend your tokens.\" })] })), _jsx(Button, { variant: \"primary\", onClick: onTokenAllowance, children: \"Grant token allowance\" })] }));\r\n};\r\nexport default TokenAllowanceStep;\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/framer-motion/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Pages/Profile/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/wagmi/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/ConnectWSC.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/ethers/lib.commonjs/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Button/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/lucide-react/dist/lucide-react.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/node_modules/milkomeda-wsc/build/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Spinner/index.tsx","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/utils/convertWeiToTokens.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/TransactionStepper/constants.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/TransactionStepper/TokenAllowanceStep.d.ts","writeByteOrderMark":false,"text":"declare const TokenAllowanceStep: ({ nextStep }: {\r\n    nextStep: any;\r\n}) => import(\"react/jsx-runtime\").JSX.Element;\r\nexport default TokenAllowanceStep;\r\n"}}
