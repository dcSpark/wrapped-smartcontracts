{"code":"import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\r\nimport * as React from \"react\";\r\nimport { Check, Loader2, X } from \"lucide-react\";\r\nimport { useMediaQuery } from \"./use-stepper\";\r\nimport { StepperContainer, StepperSeparator, StepperSteLabelDescription, StepperStepButton, StepperStepConnectorContainer, StepperStepConnectorLast, StepperStepContainer, StepperStepLabelContainer, StepperStepOptionalLabel, StepperStepRow, } from \"./styles\";\r\nimport { SpinnerContainer } from \"../Spinner/styles\";\r\nconst StepsContext = React.createContext({\r\n    activeStep: 0,\r\n});\r\nexport const useStepperContext = () => React.useContext(StepsContext);\r\nexport const StepperProvider = ({ value, children }) => {\r\n    const isError = value.state === \"error\";\r\n    const isLoading = value.state === \"loading\";\r\n    const isVertical = value.orientation === \"vertical\";\r\n    const isLabelVertical = value.orientation !== \"vertical\" && value.labelOrientation === \"vertical\";\r\n    return (_jsx(StepsContext.Provider, { value: {\r\n            ...value,\r\n            isError,\r\n            isLoading,\r\n            isVertical,\r\n            isLabelVertical,\r\n        }, children: children }));\r\n};\r\nexport const Stepper = React.forwardRef(({ activeStep = 0, state, responsive = true, orientation: orientationProp = \"horizontal\", onClickStep, labelOrientation = \"horizontal\", children, errorIcon, successIcon, variant = \"default\", }, ref) => {\r\n    const childArr = React.Children.toArray(children);\r\n    const stepCount = childArr.length;\r\n    const renderHorizontalContent = () => {\r\n        if (activeStep <= childArr.length) {\r\n            return React.Children.map(childArr[activeStep], (node) => {\r\n                if (!React.isValidElement(node))\r\n                    return;\r\n                return React.Children.map(node.props.children, (childNode) => childNode);\r\n            });\r\n        }\r\n        return null;\r\n    };\r\n    const isClickable = !!onClickStep;\r\n    const isMobile = useMediaQuery(\"(max-width: 43em)\");\r\n    const orientation = isMobile && responsive ? \"vertical\" : orientationProp;\r\n    return (_jsxs(StepperProvider, { value: {\r\n            activeStep,\r\n            orientation,\r\n            state,\r\n            responsive,\r\n            onClickStep,\r\n            labelOrientation,\r\n            isClickable,\r\n            stepCount,\r\n            errorIcon,\r\n            successIcon,\r\n            variant,\r\n        }, children: [_jsx(StepperContainer, { ref: ref, \"$isVertical\": orientation === \"vertical\", children: React.Children.map(children, (child, i) => {\r\n                    var _a;\r\n                    const isCompletedStep = (_a = (React.isValidElement(child) && child.props.isCompletedStep)) !== null && _a !== void 0 ? _a : i < activeStep;\r\n                    const isLastStep = i === stepCount - 1;\r\n                    const isCurrentStep = i === activeStep;\r\n                    const stepProps = {\r\n                        index: i,\r\n                        isCompletedStep,\r\n                        isCurrentStep,\r\n                        isLastStep,\r\n                    };\r\n                    if (React.isValidElement(child)) {\r\n                        return React.cloneElement(child, stepProps);\r\n                    }\r\n                    return null;\r\n                }) }), orientation === \"horizontal\" && renderHorizontalContent()] }));\r\n});\r\nStepper.displayName = \"Stepper\";\r\nexport const StepperStep = React.forwardRef((props, ref) => {\r\n    const { children, description, icon: CustomIcon, index, isCompletedStep, isCurrentStep, isLastStep, label, optional, optionalLabel, } = props;\r\n    const { isVertical, isError, isLoading, successIcon: CustomSuccessIcon, errorIcon: CustomErrorIcon, isLabelVertical, onClickStep, isClickable, variant, } = useStepperContext();\r\n    const hasVisited = isCurrentStep || isCompletedStep;\r\n    const handleClick = (index) => {\r\n        if (isClickable && onClickStep) {\r\n            onClickStep(index);\r\n        }\r\n    };\r\n    const Icon = React.useMemo(() => CustomIcon !== null && CustomIcon !== void 0 ? CustomIcon : null, [CustomIcon]);\r\n    const Success = React.useMemo(() => CustomSuccessIcon !== null && CustomSuccessIcon !== void 0 ? CustomSuccessIcon : _jsx(Check, {}), [CustomSuccessIcon]);\r\n    const Error = React.useMemo(() => CustomErrorIcon !== null && CustomErrorIcon !== void 0 ? CustomErrorIcon : _jsx(X, {}), [CustomErrorIcon]);\r\n    const RenderIcon = React.useMemo(() => {\r\n        if (isCompletedStep)\r\n            return Success;\r\n        if (isCurrentStep) {\r\n            if (isError)\r\n                return Error;\r\n            if (isLoading)\r\n                return (_jsx(SpinnerContainer, { children: _jsx(Loader2, {}) }));\r\n        }\r\n        if (Icon)\r\n            return Icon;\r\n        return (index || 0) + 1;\r\n    }, [isCompletedStep, Success, isCurrentStep, Icon, index, isError, Error, isLoading]);\r\n    return (_jsxs(StepperStepContainer, { \"$isLastStep\": isLastStep, \"$isVertical\": isVertical, \"$isClickable\": isClickable && !!onClickStep, ref: ref, onClick: () => handleClick(index), \"aria-disabled\": !hasVisited, children: [_jsxs(StepperStepRow, { \"$isLabelVertical\": isLabelVertical, children: [_jsx(StepperStepButton, { \"aria-current\": isCurrentStep ? \"step\" : undefined, \"data-invalid\": isCurrentStep && isError, \"data-highlighted\": isCompletedStep, \"data-clickable\": isClickable, disabled: !(hasVisited || isClickable), \"$isCompletedStep\": isCompletedStep || typeof RenderIcon !== \"number\", \"$variant\": isCurrentStep && isError ? \"destructive\" : variant, children: RenderIcon }), _jsx(StepperStepLabel, { label: label, description: description, optional: optional, optionalLabel: optionalLabel, ...{ isCurrentStep } })] }), _jsx(StepperStepConnector, { index: index, isLastStep: isLastStep, hasLabel: !!label || !!description, isCompletedStep: isCompletedStep || false, children: (isCurrentStep || isCompletedStep) && children })] }));\r\n});\r\nStepperStep.displayName = \"StepperStep\";\r\nconst StepperStepLabel = ({ isCurrentStep, label, description, optional, optionalLabel, }) => {\r\n    const { isLabelVertical } = useStepperContext();\r\n    const shouldRender = !!label || !!description;\r\n    const renderOptionalLabel = !!optional && !!optionalLabel;\r\n    return shouldRender ? (_jsxs(StepperStepLabelContainer, { \"aria-current\": isCurrentStep ? \"step\" : undefined, \"$isLabelVertical\": isLabelVertical, children: [!!label && (_jsxs(\"p\", { children: [label, renderOptionalLabel && (_jsxs(StepperStepOptionalLabel, { children: [\"(\", optionalLabel, \")\"] }))] })), !!description && _jsx(StepperSteLabelDescription, { children: description })] })) : null;\r\n};\r\nStepperStepLabel.displayName = \"StepperStepLabel\";\r\nconst StepperStepConnector = React.memo(({ isCompletedStep, children, isLastStep }) => {\r\n    const { isVertical } = useStepperContext();\r\n    if (isVertical) {\r\n        return (_jsx(StepperStepConnectorContainer, { \"data-highlighted\": isCompletedStep, \"$isLastStep\": isLastStep, \"$isCompletedStep\": isCompletedStep, children: !isCompletedStep && _jsx(StepperStepConnectorLast, { children: children }) }));\r\n    }\r\n    if (isLastStep) {\r\n        return null;\r\n    }\r\n    return (_jsx(StepperSeparator, { \"data-highlighted\": isCompletedStep, orientation: isVertical ? \"vertical\" : \"horizontal\" }));\r\n});\r\nStepperStepConnector.displayName = \"StepperStepConnector\";\r\n","references":["/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@types/react/ts5.0/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/lucide-react/dist/lucide-react.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/node_modules/@radix-ui/react-separator/dist/index.d.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Stepper/use-stepper.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Stepper/styles.ts","/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/src/components/Common/Spinner/styles.ts"],"dts":{"name":"/Users/paulclindo/local/dcspark/wrapped-smartcontracts/packages/milkomeda-wsc-ui/build/components/Common/Stepper/index.d.ts","writeByteOrderMark":false,"text":"import * as React from \"react\";\r\n/********** StepperProvider **********/\r\ninterface StepperContextValue extends StepperProps {\r\n    isClickable?: boolean;\r\n    isError?: boolean;\r\n    isLoading?: boolean;\r\n    isVertical?: boolean;\r\n    isLabelVertical?: boolean;\r\n    stepCount?: number;\r\n}\r\nexport declare const useStepperContext: () => StepperContextValue;\r\nexport declare const StepperProvider: React.FC<{\r\n    value: StepperContextValue;\r\n    children: React.ReactNode;\r\n}>;\r\n/********** Stepper **********/\r\nexport interface StepperProps {\r\n    activeStep: number;\r\n    orientation?: \"vertical\" | \"horizontal\";\r\n    state?: \"loading\" | \"error\";\r\n    responsive?: boolean;\r\n    onClickStep?: (step: number) => void;\r\n    successIcon?: React.ReactElement;\r\n    errorIcon?: React.ReactElement;\r\n    labelOrientation?: \"vertical\" | \"horizontal\";\r\n    children?: React.ReactNode;\r\n    variant?: \"default\" | \"ghost\" | \"outline\" | \"secondary\";\r\n}\r\nexport declare const Stepper: React.ForwardRefExoticComponent<StepperProps & React.RefAttributes<HTMLDivElement>>;\r\n/********** StepperStep **********/\r\nexport interface StepperConfig extends StepperStepLabelProps {\r\n    icon?: React.ReactElement;\r\n}\r\nexport interface StepperStepProps extends React.HTMLAttributes<HTMLDivElement>, StepperConfig {\r\n    isCompletedStep?: boolean;\r\n}\r\ninterface StepperStepStatus {\r\n    index: number;\r\n    isCompletedStep?: boolean;\r\n    isCurrentStep?: boolean;\r\n    isLastStep?: boolean;\r\n}\r\ninterface StepperStepAndStatusProps extends StepperStepProps, StepperStepStatus {\r\n}\r\nexport declare const StepperStep: React.ForwardRefExoticComponent<StepperStepAndStatusProps & React.RefAttributes<HTMLDivElement>>;\r\n/********** StepperStepLabel **********/\r\ninterface StepperStepLabelProps {\r\n    label: string | React.ReactNode;\r\n    description?: string | React.ReactNode;\r\n    optional?: boolean;\r\n    optionalLabel?: string | React.ReactNode;\r\n}\r\nexport {};\r\n"}}
